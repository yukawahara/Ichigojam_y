<!--
VRControl styles

This will set the styles for all VR custom controls:

View, Panel, Popup 


-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    >

    <Storyboard x:Key="pageContentSlideLeft">
        <!--        <DoubleAnimation From="0.2" To="1" Duration="0:0:0.6" Storyboard.TargetProperty="Opacity"/>-->
        <DoubleAnimation From="0.8" To="1" Duration="0:0:0.6" AccelerationRatio=".7" DecelerationRatio=".3"  Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.X)" />
        <!--        <DoubleAnimation From="0.8" To="1" Duration="0:0:0.5" AccelerationRatio=".7" DecelerationRatio=".3" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.ScaleY)" />-->
    </Storyboard>

    <Storyboard x:Key="pageContentSlideRight">
        <DoubleAnimation From="0.8" To="1" Duration="0:0:0.6" AccelerationRatio=".7" DecelerationRatio=".3"  Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.X)" />
    </Storyboard>


    <!--ViewPort3D-->
    <Style TargetType="{x:Type Viewport3D}">
        <Setter Property="Focusable" Value="True"></Setter>
    </Style>

    <Style x:Key="GridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Background" Value="{DynamicResource PanelGradientBrush}"></Setter>
    </Style>


    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel Grid.Row="0" Panel.ZIndex="1" Margin="0,0,0,-1" IsItemsHost="True" Background="{DynamicResource RightPanelHeaderBackground}" />
                        <Border Grid.Row="1" BorderBrush="{DynamicResource PanelGradientBrush}" BorderThickness="0" CornerRadius="0, 12, 12, 12">
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border" Background="{DynamicResource PanelGradientBrush}" BorderBrush="{DynamicResource PanelGradientBrush}" BorderThickness="1,1,1,1" CornerRadius="3,3,0,0" Margin="0,0,0,1">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="12,2,12,2"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF4A7E31" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedTabColor}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#01000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchboxTabControl" TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="18"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel Grid.Row="0" Panel.ZIndex="1" Margin="0,0,0,-1" IsItemsHost="True" Background="{DynamicResource SearchHeaderBackground}" />
                        <Border Grid.Row="1" BorderBrush="{DynamicResource PanelGradientBrush}" BorderThickness="0" CornerRadius="0, 12, 12, 12">
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchboxTabItem" TargetType="{x:Type TabItem}">
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border" Background="{DynamicResource PanelGradientBrush}" BorderBrush="{DynamicResource PanelGradientBrush}" BorderThickness="1,1,1,1" CornerRadius="3,3,0,0" Margin="0,0,0,1" Height="26">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Height="26" Margin="2"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF4A4A4A" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedSearchboxTabColor}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#01000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabControlNoBorder" TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel Grid.Row="0" Panel.ZIndex="1" Margin="0,0,4,-1" IsItemsHost="True" Background="Transparent" />
                        <Border Grid.Row="1" BorderBrush="{DynamicResource PanelGradientBrush}" BorderThickness="0" CornerRadius="0, 12, 12, 12">
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightPanelTabItem" TargetType="{x:Type TabItem}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FontSize" Value="10"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border" Width="24" Height="24" Background="{DynamicResource PanelGradientBrush}" BorderBrush="{DynamicResource PanelGradientBrush}" BorderThickness="0" CornerRadius="2,2,0,0">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="0"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource RightMenuUpOver}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource RightMenuUpOut}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--    <Style x:Key="TabStyle" TargetType="{x:Type TabControl}">-->
    <!--        <Setter Property="Focusable" Value="False"></Setter>-->
    <!--        <Setter Property="Background" Value="{DynamicResource PanelGradientBrush}"></Setter>-->
    <!--    </Style>-->

    <!--    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">-->
    <!--        <Setter Property="Focusable" Value="True"></Setter>-->
    <!--        <Setter Property="Background" Value="{DynamicResource PanelGradientBrush}"></Setter>-->
    <!--    </Style>-->

    <Style x:Key="PanelStyle" TargetType="{x:Type Panel}">
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Background" Value="{DynamicResource HeaderBrush}"></Setter>
        <!--		<Setter Property="Background" Value="{DynamicResource PanelTransparentBrush}"></Setter>-->
        <!--		<Style.Triggers>-->
        <!--			<Trigger Property="IsMouseOver" Value="true">-->
        <!--				<Setter Property="Background" Value="{DynamicResource PanelGradientBrush}"/>-->
        <!--			</Trigger>-->
        <!--		</Style.Triggers>-->
    </Style>

    <Style x:Key ="ExpanderHeaderStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
    </Style>


    <!-- This is the style for tooltip-->
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="VerticalOffset" Value="-2" />
        <Setter Property="HorizontalOffset" Value="-2" />
        <Setter Property="Placement" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Grid Name="Border" Background="Transparent" Width="{TemplateBinding Width}" Height="40">
                        <Rectangle Height="35" RadiusX="7.5" RadiusY="7.5" Opacity="0.5">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.5,-0.5" EndPoint="0.547,0.913">
                                    <GradientStop Color="#FFEEEEEE" Offset="0"/>
                                    <GradientStop Color="Black" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <!--						<Path Opacity="0.5" Fill="Black" Stretch="Fill" HorizontalAlignment="Left" Margin="10,45,0,0" Width="15.692" Height="14.81" Data="M130,122 L138,136 144,122"/>-->
                        <ContentPresenter Margin="10,0,5,0" HorizontalAlignment="Center" VerticalAlignment="Center" TextBlock.Foreground="Black" TextBlock.FontSize="20" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- toolbar -->
    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Background" Value="Red"/>
        <Setter Property="Width" Value="20"/>
    </Style>


    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
        <Setter Property="FontSize" Value="7.5pt"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="Bg" BorderBrush="{DynamicResource RaisedHighlight}" BorderThickness="1,1,1,1" Background="#FF292929">
                            <!--                            <Border.Background>-->
                            <!--                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">-->
                            <!--                                    <GradientStop Offset="0.0" Color="#585858" />-->
                            <!--                                    <GradientStop Offset="1.2" Color="#282828" />-->
                            <!--                                </LinearGradientBrush>-->
                            <!--                            </Border.Background>-->
                        </Border>
                        <Border x:Name="Dn" Opacity="0" BorderThickness="1,1,1,1" BorderBrush="#282828" Background="#FF292929">
                            <!--                            <Border.Background>-->
                            <!--                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">-->
                            <!--                                    <GradientStop Offset="0.0" Color="#505050" />-->
                            <!--                                    <GradientStop Offset="1.2" Color="#383838" />-->
                            <!--                                </LinearGradientBrush>-->
                            <!--                            </Border.Background>-->
                        </Border>
                        <Border x:Name="Sh" BorderBrush="#FF5c5c5c" BorderThickness="1,1,1,1"  />

                        <ContentPresenter
                              x:Name="Content"
                              Margin="0,0,0,2"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--                                        <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#888888" Duration="0:0:0.1" />-->
                                        <!--                                        <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#686868" Duration="0:0:0.1" />-->
                                        <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#282828" Duration="0:0:0.1" />
                                        <!--                                        <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" To="#686868" Duration="0:0:0.1" />-->
                                        <!--                                        <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" To="#282828" Duration="0:0:0.1" />-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--                                        <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Duration="0:0:0.1" />-->
                                        <!--                                        <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.2" />-->
                                        <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Content" Property="RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform Y="1" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Bg" Property="RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform Y="1" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Bg" Property="Opacity" Value="0" />
                            <Setter TargetName="Dn" Property="Opacity" Value="1" />
                            <Setter TargetName="Sh" Property="BorderBrush" Value="#555" />
                        </Trigger>


                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Content" Property="RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform Y="1" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Sh" Property="RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform Y="1" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Bg" Property="Opacity" Value="0" />
                            <Setter TargetName="Dn" Property="Opacity" Value="1" />
                            <Setter TargetName="Dn" Property="Background" Value="{DynamicResource CheckedStle}" />
                            <Setter TargetName="Sh" Property="BorderBrush" Value="#666" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

<!--    <Style x:Key="RightPopupMenuExpander" TargetType="{x:Type Expander}">-->
<!--        <Setter Property="Padding" Value="1"/>-->
<!--        <Setter Property="Foreground" Value="{DynamicResource ExpanderForegroundBrush}"/>-->
<!--        <Setter Property="Background" Value="{DynamicResource ExpanderBackBackgroundBrush}"/>-->
<!--        <Setter Property="Margin" Value="2,0,2,0"/>-->
<!---->
<!--        <Setter Property="Template">-->
<!--            <Setter.Value>-->
<!--                <ControlTemplate TargetType="{x:Type Expander}" >-->
<!--                    <Grid >-->
<!---->
<!--                        <Grid.RowDefinitions>-->
<!--                            <RowDefinition Height="28"/>-->
<!--                            <RowDefinition Height="*"/>-->
<!--                        </Grid.RowDefinitions>-->
<!---->
<!--                        <Border Grid.Row="0" x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="4,4,4,4">-->
<!--                            <ToggleButton Style="{DynamicResource ToggleButtonStyle}"-->
<!--                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" -->
<!--                                          HorizontalContentAlignment="Stretch" >-->
<!--                                <ToggleButton.Content>-->
<!--                                    <StackPanel Orientation="Horizontal" >-->
<!--                                        <Path Grid.Column="0"-->
<!--                                                SnapsToDevicePixels="True"-->
<!--                                                IsHitTestVisible="False"-->
<!--                                                Name="Arrow"-->
<!--                                                Margin="8,0,8,0"-->
<!--                                                Fill="#0FFF"-->
<!--                                                RenderTransformOrigin="0.5,0.5"-->
<!--                                                HorizontalAlignment="Right"-->
<!--                                                VerticalAlignment="Center"-->
<!--                                                Data="M 0 0 L 0 8 L 5 4 Z"-->
<!--                                                Stroke="{TemplateBinding Foreground}"-->
<!--                                                StrokeThickness="0.5" >-->
<!--                                            <Path.RenderTransform>-->
<!--                                                <RotateTransform Angle="0" />-->
<!--                                            </Path.RenderTransform>-->
<!--                                        </Path>-->
<!--                                        <ContentPresenter Margin="4" Grid.Column="1" RecognizesAccessKey="True" ContentSource="Header"/>-->
<!--                                    </StackPanel>-->
<!--                                </ToggleButton.Content>-->
<!--                            </ToggleButton>-->
<!--                        </Border>-->
<!---->
<!--                        <Util:Reveal x:Name="ContentReveal" Grid.Row="1" VerticalReveal="FromTopToBottom" HorizontalReveal="None">-->
<!--                            <Border BorderThickness="1,1,1,1" BorderBrush="#FF5C5C5C" Background="#FF363636">-->
                                <!--                                <Border BorderThickness="0.5,1,0,0" BorderBrush="#6000" Background="#10FFFFFF" CornerRadius="2,3,2,2" SnapsToDevicePixels="True" Margin="2" >-->
                                <!--                                    <Border BorderThickness="0,0,0.5,1" BorderBrush="#FF5C5C5C" CornerRadius="2,3,2,2">-->
<!--                                <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}" ToolTipService.IsEnabled="False" />-->
                                <!--                                    </Border>-->
                                <!--                                </Border>-->
<!--                            </Border>-->
<!--                        </Util:Reveal>-->
<!--                    </Grid>-->
<!--                    <ControlTemplate.Triggers>-->
<!--                        <MultiTrigger>-->
<!--                            <MultiTrigger.Conditions>-->
<!--                                <Condition SourceName="Border" Property="IsMouseOver" Value="True" />-->
<!--                                <Condition Property="IsExpanded" Value="False" />-->
<!--                            </MultiTrigger.Conditions>-->
<!--                            <Setter TargetName="Border" Property="Background" Value="#20FFFFFF" />-->
<!--                            <Setter TargetName="Border" Property="Cursor" Value="Hand" />-->
<!--                        </MultiTrigger>-->
<!--                        <Trigger Property="IsExpanded" Value="True">-->
<!--                            <Trigger.EnterActions>-->
<!--                                <BeginStoryboard>-->
<!--                                    <Storyboard>-->
<!--                                        <DoubleAnimation BeginTime="0:0:0.2"  Storyboard.TargetName="ContentReveal" Storyboard.TargetProperty="AnimationProgress" Duration="0:0:0.2" To="1" DecelerationRatio="1" />-->
<!--                                        <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)" Duration="0:0:0.2" To="90" DecelerationRatio="1" />-->
<!--                                        <ColorAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" Duration="0:0:0.2" To="#FFF" DecelerationRatio="1" />-->
<!--                                    </Storyboard>-->
<!--                                </BeginStoryboard>-->
<!--                            </Trigger.EnterActions>-->
<!--                            <Trigger.ExitActions>-->
<!--                                <BeginStoryboard>-->
<!--                                    <Storyboard>-->
<!--                                        <DoubleAnimation Storyboard.TargetName="ContentReveal" Storyboard.TargetProperty="AnimationProgress" Duration="0:0:0.2" AccelerationRatio="1" />-->
<!--                                        <DoubleAnimation  Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)" Duration="0:0:0.2" AccelerationRatio="1" />-->
<!--                                        <ColorAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" Duration="0:0:0.2" AccelerationRatio="1" />-->
<!--                                    </Storyboard>-->
<!--                                </BeginStoryboard>-->
<!--                            </Trigger.ExitActions>-->
<!--                        </Trigger>-->
<!--                    </ControlTemplate.Triggers>-->
<!--                </ControlTemplate>-->
<!--            </Setter.Value>-->
<!--        </Setter>-->
<!--    </Style>-->
<!---->
<!--    <Style x:Key="InsertionPointThumb" TargetType="{x:Type Thumb}">-->
<!--        <Setter Property="SnapsToDevicePixels" Value="True"/>-->
<!--        <Setter Property="OverridesDefaultStyle" Value="true"/>-->
<!--        <Setter Property="IsTabStop" Value="false"/>-->
<!--        <Setter Property="Focusable" Value="false"/>-->
        <!--            <Setter Property="Background" Value="Red" />-->
<!--        <Setter Property="Template">-->
<!--            <Setter.Value>-->
<!--                <ControlTemplate TargetType="{x:Type Thumb}">-->
<!--                    <Grid Background="#01000000" ToolTip="{x:Static Properties:Resources.Views_Shape_Insertion_Point}">-->
<!--                        <Path Data="M8,0 L8,5 M5,8 L0,8 M0,9 L5,9 M8,13 L8,17 M9,17 L9,13 M13,9 L17,9 M13,8 L17,8 M9,0 L9,5" -->
<!--                                  StrokeThickness="1" Opacity="0.5" Stroke="White" Width="17" Height="17" -->
<!--                                   />-->
                        <!--DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}"-->
<!--                        <Path Data="M7,1 L7,5 M5,7 L1,7 M1,10 L5,10 M7,13 L7,16 M10,16 L10,13 M13,10 L16,10 M16,7 L13,7 M10,5 L10,1" -->
<!--                                  StrokeThickness="1" Opacity="0.5" Stroke="Black" Width="17" Height="17" -->
<!--                                   />-->
                        <!--DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}"-->
<!--                        <Ellipse Width="9" Height="9" Stroke="Yellow" StrokeThickness="2" Opacity="1"></Ellipse>-->
<!--                        <Grid.RenderTransform>-->
<!--                            <RotateTransform Angle="45" />-->
<!--                        </Grid.RenderTransform>-->
<!--                    </Grid>-->
<!--                </ControlTemplate>-->
<!--            </Setter.Value>-->
<!--        </Setter>-->
<!--    </Style>-->
    <!-- Rotate Thumb Style-->
<!--    <Style  x:Key="RotationThumb" TargetType="{x:Type Thumb}">-->
<!--        <Setter Property="IsTabStop" Value="false"/>-->
<!--        <Setter Property="Focusable" Value="false"/>-->
<!--        <Setter Property="Template">-->
<!--            <Setter.Value>-->
<!--                <ControlTemplate TargetType="{x:Type Thumb}">-->
<!--                    <StackPanel Background="#01000000">-->
<!--                        <Ellipse Width="10" Height="10" Stroke="#C892CD32" StrokeThickness="1" Opacity="1"></Ellipse>-->
<!--                        <Path Data="M10,0 L10,10" Stroke="#C892CD32" StrokeThickness="1" Opacity="1"/>-->
<!--                    </StackPanel>-->
<!--                </ControlTemplate>-->
<!--            </Setter.Value>-->
<!--        </Setter>-->
<!--    </Style>-->

    <!-- stayle used in shapeEditor for buttons on context menu-->
    <Style x:Key="ButtonBorder" TargetType="{x:Type Border}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background" Value="{DynamicResource PanelTransparentBrush}"/>
    </Style>

    <Style x:Key="RightClickButtonBorder" TargetType="{x:Type Border}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background" Value="#01000000"/>
    </Style>


    <!-- This is the style for tooltip-->
    <Style x:Key="ContextMenuStyle" TargetType="{x:Type ContentControl}">
        <!--        <Setter Property="OverridesDefaultStyle" Value="true"/>-->
        <!--        <Setter Property="VerticalOffset" Value="-2" />-->
        <!--        <Setter Property="HorizontalOffset" Value="-2" />-->
        <!--        <Setter Property="Placement" Value="Top" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Name="Border" Background="Transparent" Width="{TemplateBinding Width}" >
                        <Rectangle  RadiusX="5" RadiusY="5" Opacity="0.9" >
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.5,0.2" EndPoint="0.5,0.6">
                                    <GradientStop Color="Gray" Offset="0"/>
                                    <GradientStop Color="Black" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <!--						<Path Opacity="0.5" Fill="Black" Stretch="Fill" HorizontalAlignment="Left" Margin="10,45,0,0" Width="15.692" Height="14.81" Data="M130,122 L138,136 144,122"/>-->
                        <ContentPresenter Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center" TextBlock.Foreground="Black" TextBlock.FontSize="20" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuTwoLinesStyle" TargetType="{x:Type ContentControl}">
        <!--        <Setter Property="OverridesDefaultStyle" Value="true"/>-->
        <!--        <Setter Property="VerticalOffset" Value="-2" />-->
        <!--        <Setter Property="HorizontalOffset" Value="-2" />-->
        <!--        <Setter Property="Placement" Value="Top" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Name="Border" Background="Transparent" Width="{TemplateBinding Width}" >
                        <Rectangle  RadiusX="5" RadiusY="5" Opacity="0.98" >
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0.5,0.2" EndPoint="0.5,0.3">
                                    <GradientStop Color="Gray" Offset="0"/>
                                    <GradientStop Color="Black" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <!--						<Path Opacity="0.5" Fill="Black" Stretch="Fill" HorizontalAlignment="Left" Margin="10,45,0,0" Width="15.692" Height="14.81" Data="M130,122 L138,136 144,122"/>-->
                        <ContentPresenter Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center" TextBlock.Foreground="Black" TextBlock.FontSize="20" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderUpDown" TargetType="{x:Type Slider}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" Grid.Row="0" BorderThickness="1" BorderBrush="Gray" Margin="0" Grid.RowSpan="2" 
                                VerticalAlignment="Center" HorizontalAlignment="Stretch">
                            <TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value}" Width="50" TextAlignment="Right"/>
                        </Border>
                        <Border Grid.Column="1" Grid.Row="0" BorderBrush="{DynamicResource ScrollBarBorderBrush}" BorderThickness="1" Background="{DynamicResource ScrollBarBackground}" Height="9" Width="15"/>
                        <RepeatButton Name="PART_IncreaseRepeatButton" Grid.Column="1" Grid.Row="0" 
                          Style="{DynamicResource ScrollBarLineButton}" Height="9" Width="15"
                          Content="M 0 3 L 3 0 L 6 3 M 0 6 L 3 3 L 6 6" Command="Slider.IncreaseLarge" />
                        <Border Grid.Column="1" Grid.Row="1" BorderBrush="{DynamicResource ScrollBarBorderBrush}" BorderThickness="1" Background="{DynamicResource ScrollBarBackground}" Height="9" Width="15"/>
                        <RepeatButton Name="PART_DecreaseRepeatButton" Grid.Column="1" Grid.Row="1" 
                          Style="{DynamicResource ScrollBarLineButton}" Height="9" Width="15"
                          Content="M 0 0 L 3 3 L 6 0 M 0 3 L 3 6 L 6 3" Command="Slider.DecreaseLarge" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_DecreaseRepeatButton" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_DecreaseRepeatButton" Property="Grid.Column" Value="1" />
                            <Setter TargetName="PART_IncreaseRepeatButton" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_IncreaseRepeatButton" Property="Grid.Column" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>