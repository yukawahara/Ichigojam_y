<!--
all interaction controls:
 - button
 - link
 - textbox
 - richtextbox
 - combo
 - listbox
 - label
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Components="clr-namespace:RoDuino.SMS.Components;assembly="
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:primitives="clr-namespace:RoDuino.SMS.Components"
    xmlns:Converters="clr-namespace:RoDuino.SMS.Converters" >

    <Converters:ErrorConverter x:Key="errorConverter"/>

    <BitmapImage x:Key="arrowDown" UriSource="..\..\..\Content\Icons\downarrow.png" />

    <BitmapImage x:Key="closeUp" UriSource="..\..\..\Content\Icons\close_up.png" />
    <BitmapImage x:Key="closeHover" UriSource="..\..\..\Content\Icons\close_hover.png" />


    <Style x:Key="TextBlockExpander" TargetType="{x:Type TextBlock}" >
        <Setter Property="TextBlock.FontSize" Value="{DynamicResource StoryboardPopupFontSize}"/>
        <Setter Property="TextBox.FontSize" Value="{DynamicResource StoryboardPopupFontSize}"/>
        <Setter Property="Label.FontSize" Value="{DynamicResource StoryboardPopupFontSize}"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource ExpanderForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource ExpanderBackBackgroundBrush}"/>
        <Setter Property="Margin" Value="2"/>
    </Style>



    <!--Button - green, gradient-->
    <Style x:Key="ButtonImageStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusX="5" RadiusY="5" Fill="{x:Null}">
                        </Rectangle>
                        <ContentPresenter Name="text" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusX="5" RadiusY="5" Fill="{x:Null}">
                        </Rectangle>
                        <ContentPresenter Name="text" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--        <Style.Triggers>-->
        <!--            <Trigger Property="IsMouseOver" Value="True">-->
        <!--                <Setter Property="Effect">-->
        <!--                    <Setter.Value>-->
        <!--                        <Effects:GrayScaleEffect DesaturationFactor="1"></Effects:GrayScaleEffect>-->
        <!--                    </Setter.Value>-->
        <!--                </Setter>-->
        <!--            </Trigger>-->
        <!--            <Trigger Property="IsMouseOver" Value="False">-->
        <!--                <Setter Property="Effect">-->
        <!--                    <Setter.Value>-->
        <!--                        <Effects:GrayScaleEffect DesaturationFactor="0"></Effects:GrayScaleEffect>-->
        <!--                    </Setter.Value>-->
        <!--                </Setter>-->
        <!--            </Trigger>-->
        <!--        </Style.Triggers>-->
    </Style>

    <Style  TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" Stroke="#FF051F42" StrokeMiterLimit="1.000000" StrokeThickness="0.500000" RadiusX="5" RadiusY="5" 
                                   Fill="{DynamicResource ButtonBrush}">
                        </Rectangle>
                        <ContentPresenter Name="text" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ButtonDisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ButtonOverBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- show/hide button style -->
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" Stroke="#FF051F42" StrokeMiterLimit="1.000000" StrokeThickness="0.500000" RadiusX="5" RadiusY="5" 
                                   Fill="{DynamicResource ButtonBrush}">
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ButtonDisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ButtonOverBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonLoginStyle" BasedOn="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="20"/>
    </Style>

    <Style x:Key="HeaderButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" Stroke="#FF051F42" StrokeMiterLimit="1.000000" StrokeThickness="0.500000" RadiusX="5" RadiusY="5" Fill="{x:Null}">
                        </Rectangle>
                        <ContentPresenter Name="text" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="False"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Background" Value="#FF0000" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="MinWidth" Value="18"/>
        <Setter Property="MinHeight" Value="18"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Fill="Red" Height="18" Width="18" StrokeThickness="0.5" Stroke="#FF051F42" StrokeMiterLimit="1.000000" ></Ellipse>
                        <ContentPresenter Name="text" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="ImageButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="-1" />
        <!--        <Setter Property="Template">-->
        <!--            <Setter.Value>-->
        <!--                <ControlTemplate TargetType="{x:Type Button}">-->
        <!--                    <Grid>-->
        <!--                        <ContentPresenter Name="text" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>-->
        <!--                    </Grid>-->
        <!--                </ControlTemplate>-->
        <!--            </Setter.Value>-->
        <!--        </Setter>-->
    </Style>


    <Style x:Key="ImageButton" TargetType="{x:Type Components:RoImageButton}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Components:RoImageButton}">
                    <Grid Background="Transparent">
                        <Image Stretch="Fill" Source="{TemplateBinding Up}" />
                        <Image Name="keyboard" Stretch="Fill" Opacity="0" Source="{TemplateBinding Hover}" />
                        <Image Name="over" Stretch="Fill" Opacity="0" Source="{TemplateBinding Hover}" />
                        <Image Name="down" Stretch="Fill" Opacity="0" Source="{TemplateBinding Down}" />
                        <Image Name="active" Stretch="Fill" Opacity="0" Source="{TemplateBinding Down}" />
                        <Image Name="inactive" Stretch="Fill" Opacity="0" Source="{TemplateBinding Inactive}" />
                        <TextBlock Name="contentPresenterShadow" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="10.5pt" Foreground="#333" Margin="1,-3,0,0" Text="{TemplateBinding Content}" />
                        <TextBlock Name="contentPresenter" Width="Auto" Height="Auto" Foreground="#FFFFFF" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="10.5pt" Margin="0,-5,0,0" Text="{TemplateBinding Content}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="over" Storyboard.TargetProperty="(Grid.Opacity)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.4" Storyboard.TargetName="over" Storyboard.TargetProperty="(Grid.Opacity)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Button.PreviewMouseLeftButtonDown">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="down" Storyboard.TargetProperty="(Grid.Opacity)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Button.PreviewMouseLeftButtonUp">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.4" Storyboard.TargetName="down" Storyboard.TargetProperty="(Grid.Opacity)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Button.GotKeyboardFocus">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.4" Storyboard.TargetName="keyboard" Storyboard.TargetProperty="(Grid.Opacity)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Button.LostKeyboardFocus">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.4" Storyboard.TargetName="keyboard" Storyboard.TargetProperty="(Grid.Opacity)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="Tag" Value="Active">
                            <Setter TargetName="active" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="active" Property="Opacity" Value="0" />
                            <Setter TargetName="inactive" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TextBlock-->
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontSize" Value="12" />
    </Style>

    <Style x:Key="ReadonlyTextBlockStyle" TargetType="{x:Type TextBlock}" >
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Background" Value="#00ffffff" />
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="#ff000000" />
                <Setter Property="Background" Value="#a0ffffff" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LabelStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Padding" Value="10 5 0 5"/>
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
    </Style>

    <Style x:Key="FormLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Padding" Value="10 5 0 5"/>
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
    </Style>

    <Style x:Key="PropertyStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Padding" Value="15 0 0 0"/>
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
    </Style>

    <!-- passwordbox default style -->
    <Style TargetType="{x:Type Components:RoPasswordBox}">
        <Setter Property="Height" Value="20" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border" BorderBrush="{DynamicResource TextBoxBorderBrush}" BorderThickness="1" >
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledFontColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="Height" Value="20" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}" />
    </Style>

    <Style TargetType="{x:Type FlowDocumentScrollViewer}">
        <Setter Property="IsToolBarVisible" Value="false"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}" />
    </Style>

    <!--VRTExtBoxStyle-->
    <Style TargetType="{x:Type Components:RoTextBox}" BasedOn="{StaticResource TextStyle}">
    </Style>

    <!-- textbox default style -->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border" BorderBrush="{DynamicResource TextBoxBorderBrush}" BorderThickness="1" >
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Border BorderBrush="Red" BorderThickness="1" CornerRadius="5">
                            <AdornedElementPlaceholder x:Name="adorner"></AdornedElementPlaceholder>
                        </Border>
                        <TextBlock Margin="2,0,0,0" Foreground="Red" 
                           ToolTip="{Binding ElementName=adorner, 
                    Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">*</TextBlock>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},
                Path=(Validation.Errors)[0].ErrorContent, Converter={StaticResource errorConverter}}"/>
            </Trigger>
        </Style.Triggers>

        <!--        <Setter Property="Validation.ErrorTemplate">-->
        <!--            <Setter.Value>-->
        <!--                <ControlTemplate>-->
        <!--                    <DockPanel LastChildFill="True">-->
        <!--                        <TextBlock TextAlignment="Left" VerticalAlignment="Center" HorizontalAlignment="Left"-->
        <!--                        Foreground="Red"-->
        <!--                        Text="{Binding ElementName=MyAdorner, -->
        <!--                               Path=AdornedElement.(Validation.Errors)-->
        <!--                               [0].ErrorContent}">-->
        <!--                    </TextBlock>-->
        <!--                        <Border BorderBrush="Red" BorderThickness="1">-->
        <!--                            <AdornedElementPlaceholder Name="MyAdorner" />-->
        <!--                        </Border>-->
        <!--                    </DockPanel>-->
        <!--                </ControlTemplate>-->
        <!--            </Setter.Value>-->
        <!--        </Setter>-->
    </Style>

    <!-- richtextbox default style -->
    <Style TargetType="{x:Type RichTextBox}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border" BorderBrush="{DynamicResource TextBoxBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" IsTabStop="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- search richtextbox default style -->
    <!--    BorderBrush="{DynamicResource TextBoxBorderBrush}"-->
    <Style x:Key="SearchRichTextBox" TargetType="{x:Type RichTextBox}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border" CornerRadius="3"
                            Background="{DynamicResource CommonBackground}" 
                            BorderBrush="{DynamicResource RaisedHighlight}" 
                            BorderThickness="0,1,0,0">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- textbox style -->
    <Style x:Key="TextStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border" BorderBrush="{DynamicResource TextBoxBorderBrush}" BorderThickness="1" >
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- checkbox default style -->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Height" Value="20" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource TextBoxDisabledForegroundBrush}" />
                <Setter Property="Background" Value="{DynamicResource TextBoxDisabledForegroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- This is the style for listbox-->
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource ExpanderBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <ScrollViewer Padding="{TemplateBinding Padding}" Focusable="false">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource HigtlightListBoxItem}"/>
                            <!--                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource HigtlightListBoxItem}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}" >
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource EditListViewSelectedBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>




    <!-- list view sections -->


    <Style x:Key="EditListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Margin" Value="0,2,0,0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Border">
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="EditListViewItemTemplate" TargetType='{x:Type ListViewItem}'>
        <Grid SnapsToDevicePixels="True" Margin="0,3,0,0">
            <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5,5,5,5"/>
            <GridViewRowPresenter TextBlock.Foreground="{TemplateBinding Foreground}" TextBlock.FontSize="14" Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <!-- Change IsSelected SelectedListBoxBrush to set the selection color for the items -->
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource EditListViewSelectedBrush}" TargetName="Border"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource EditListViewSelectedBrush}" TargetName="Border"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="EditListViewItemStyle" TargetType="{x:Type ListViewItem}" >
        <Setter Property="Template" Value="{DynamicResource EditListViewItemTemplate}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>

    </Style>

    <!--    <ControlTemplate x:Key="EditListViewItemTemplate" TargetType='{x:Type ListViewItem}'>-->
<!--        <Grid SnapsToDevicePixels="True" Margin="0,0,0,0">-->
<!--            <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5,5,5,5"/>-->
<!--            <GridViewRowPresenter  x:Name="gigi" TextBlock.Foreground="{TemplateBinding Foreground}" TextBlock.FontSize="11" Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}"/>-->
<!--        </Grid>-->
<!--        <ControlTemplate.Triggers>-->
            <!-- Change IsSelected SelectedListBoxBrush to set the selection color for the items -->
            <!--			<Trigger Property="IsSelected" Value="true">-->
            <!--				<Setter Property="Background" Value="{DynamicResource EditListViewSelectedBrush}" TargetName="Border"/>-->
            <!--			</Trigger>-->
<!--            <Trigger Property="IsMouseOver" Value="True">-->
<!--                <Setter Property="BorderBrush" Value="White"/>-->
<!--            </Trigger>-->
            <!--            <Trigger Property="" Value="True">-->
            <!--                <Setter Property="BorderBrush" Value="{TemplateBinding BorderBrush}"/>-->
            <!--            </Trigger>-->
<!--        </ControlTemplate.Triggers>-->
<!--    </ControlTemplate>-->

    <Style x:Key="ListViewForFormDesigner" TargetType="ListView">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border Name="Border" BorderBrush="White" BorderThickness="0.3" CornerRadius="5">
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style x:Key="EditListViewStyle" TargetType="ListView">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="Margin" Value="0,2,0,0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border Name="Border">
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->


    <!-- column header grip style -->
    <Style x:Key="ColumnGrip" TargetType="{x:Type Thumb}">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Width" Value="3" />
        <Setter Property="Opacity" Value="0.25" />
        <Setter Property="DockPanel.Dock" Value="Right" />
    </Style>

    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Height" Value="0" />
    </Style>

    <!-- style applied to column headers -->
    <Style x:Key="ColumnHeaderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{DynamicResource HeaderBorderBrush}"/>
        <Setter Property="Background" Value="{DynamicResource HeaderBackgroundBrush}"/>
        <Setter Property="BorderThickness" Value="0,1,0,1"/>
    </Style>

    <!-- style applied to selected column headers -->
    <Style x:Key="ColumnSelectedHeaderStyle" BasedOn="{StaticResource ColumnHeaderStyle}"  TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource SelectedHeaderBackgroundBrush}"/>
    </Style>

    <!-- style applied to column headers -->
    <Style x:Key="FirstColumnHeaderStyle" BasedOn="{StaticResource ColumnHeaderStyle}" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="Padding" Value="15,5,5,5"/>
        <Setter Property="CornerRadius" Value="5,0,0,5"/>
    </Style>




    <!-- style applied to column headers -->
    <Style x:Key="LastColumnHeaderStyle" BasedOn="{StaticResource ColumnHeaderStyle}" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0,1,1,1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="CornerRadius" Value="0,5,5,0"/>
    </Style>

    <!-- header used when no sorting -->
    <Style x:Key="DataGridViewColumnHeader" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="GridViewColumnHeader.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="Bd" Style="{DynamicResource ColumnHeaderStyle}">
                        <DockPanel>
                            <TextBlock Text="{TemplateBinding GridViewColumnHeader.Content}" HorizontalAlignment="Stretch"
							  TextAlignment="Left" VerticalAlignment="Center" FontWeight="Bold" Margin="5,0,0,0"
							  Foreground="{DynamicResource DataGridHeaderFontColor}" />
                            <Thumb x:Name="PART_HeaderGripper" Style="{DynamicResource ColumnGrip}" />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- header used to sort ascending -->
    <Style x:Key="DataGridViewColumnHeaderAscending" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="Bd" Style="{DynamicResource ColumnSelectedHeaderStyle}">
                        <DockPanel>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <TextBlock Text="{TemplateBinding ContentControl.Content}" TextAlignment="Left"
                    VerticalAlignment="Center" FontWeight="Bold" Margin="5,0,0,0"
                    Foreground="{DynamicResource DataGridSelectedHeaderFontColor}" />
                                <Path StrokeThickness="1" Fill="{DynamicResource DataGridSelectedHeaderFontColor}" Data="M 5,10 L 15,10 L 10,5 L 5,10" />
                            </StackPanel>
                            <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource ColumnGrip}" />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- header used to sort descending -->
    <Style x:Key="DataGridViewColumnHeaderDescending" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="Bd" Style="{DynamicResource ColumnSelectedHeaderStyle}">
                        <DockPanel>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <TextBlock Text="{TemplateBinding ContentControl.Content}" TextAlignment="Left" 
                    VerticalAlignment="Center" FontWeight="Bold" Margin="5,0,0,0"
                    Foreground="{DynamicResource DataGridSelectedHeaderFontColor}" />
                                <Path StrokeThickness="1" Fill="{DynamicResource DataGridSelectedHeaderFontColor}" Data="M 5,5 L 10,10 L 15,5 L 5,5" />
                            </StackPanel>
                            <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource ColumnGrip}" />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FirstColumnGridViewColumnHeader" BasedOn="{StaticResource DataGridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="Bd" Style="{DynamicResource FirstColumnHeaderStyle}">
                        <TextBlock
                Text="{TemplateBinding ContentControl.Content}"
                TextAlignment="Left"
                VerticalAlignment="Center"
                Foreground="{DynamicResource DataGridHeaderFontColor}"
                FontWeight="Bold"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="FirstColumnGridViewColumnHeader" BasedOn="{StaticResource DataGridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="GridViewColumnHeader.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="Bd" Style="{DynamicResource FirstColumnHeaderStyle}">
                        <TextBlock
						  Text="{TemplateBinding GridViewColumnHeader.Content}"
						  TextAlignment="Left"
						  VerticalAlignment="Center"
						  Foreground="{DynamicResource DataGridHeaderFontColor}"
						  FontWeight="Bold"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style x:Key="LastColumnGridViewColumnHeader" BasedOn="{StaticResource DataGridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="GridViewColumnHeader.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="Bd" Style="{DynamicResource LastColumnHeaderStyle}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

<!--    <Style x:Key="EditListViewItemStyle" TargetType="{x:Type ListViewItem}" >-->
<!--        <Setter Property="Template" Value="{DynamicResource EditListViewItemTemplate}"/>-->
<!--        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>-->
<!--    </Style>-->

    <Style x:Key="EditListViewItemStyleNoBorder" TargetType="{x:Type ListViewItem}" >
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template" Value="{DynamicResource EditListViewItemTemplate}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    </Style>

    <!-- end list view sections -->

    <!-- scroll bar-->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" Margin="1" Background="Transparent" BorderThickness="1">
                        <Path Name="Path" Stroke="{DynamicResource ScrollBarRepeatButtonStroke}" StrokeThickness="0.5" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Path" Property="Stroke" Value="{DynamicResource ScrollBarRepeatButtonStrokeIsPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="6" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" BorderBrush="{DynamicResource ScrollBarBorderBrush}" BorderThickness="1" Background="{DynamicResource ScrollBarBackground}" />
            <RepeatButton Grid.Row="0" Style="{DynamicResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 3 L 3 0 L 6 3 M 0 6 L 3 3 L 6 6" />
            <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{DynamicResource ScrollBarThumb}" Margin="1,0,1,0" Background="{DynamicResource HorizontalNormalBrush}" BorderBrush="{DynamicResource HorizontalNormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3" Style="{DynamicResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 3 3 L 6 0 M 0 3 L 3 6 L 6 3"/>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="18"/>
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3" BorderBrush="{DynamicResource ScrollBarBorderBrush}" BorderThickness="1" Background="{DynamicResource ScrollBarBackground}" />
            <RepeatButton Grid.Column="0" Style="{DynamicResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 3 0 L 0 3 L 3 6 M 6 0 L 3 3 L 6 6" />
            <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{DynamicResource ScrollBarThumb}" Margin="0,1,0,1" Background="{DynamicResource HorizontalNormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" />
                    <!--                    <Thumb Style="{DynamicResource ScrollBarThumb}" Margin="0,1,0,1" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" />-->
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="3" Style="{DynamicResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 3 3 L 0 6 M 3 0 L 6 3 L 3 6"/>
        </Grid>
    </ControlTemplate>
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource ScrollBarBorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource ScrollBarBackground}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="15" />
                <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="15"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>






    <!-- User for styling the foreground color, applied to all toolbars -->
    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{DynamicResource MainBackgroundBrush}"/>
    </Style>

    <!-- User for styling the foreground color, applied to all toolbars -->
    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{DynamicResource MainBackgroundBrush}"/>
    </Style>

    <!-- This is the style for ComboBox -->

    <!--	<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">-->
    <!--		<Grid>-->
    <!--			<Grid.ColumnDefinitions>-->
    <!--				<ColumnDefinition />-->
    <!--				<ColumnDefinition Width="20" />-->
    <!--			</Grid.ColumnDefinitions>-->
    <!--			<Border-->
    <!--			  x:Name="Border"-->
    <!--			  Grid.ColumnSpan="2"-->
    <!--			  CornerRadius="2"-->
    <!--			  Background="{DynamicResource FontWhiteColor}"-->
    <!--			  BorderBrush="{DynamicResource BorderBrush}"-->
    <!--			  BorderThickness="0" />-->
    <!-- combo background    -->
    <!--			<Border-->
    <!--			  Grid.Column="0"-->
    <!--			  CornerRadius="2,0,0,2"-->
    <!--			  Margin="1"-->
    <!--			  Background="{DynamicResource FontWhiteColor}"-->
    <!--			  BorderBrush="{DynamicResource BorderBrush}"-->
    <!--			  BorderThickness="0,0,1,0" />-->
    <!---->
<!--            <Path-->
    <!--			  x:Name="Arrow"-->
    <!--			  Grid.Column="1"-->
    <!--			  Fill="#FF8B0000"-->
    <!--			  HorizontalAlignment="Center"-->
    <!--			  VerticalAlignment="Center"-->
    <!--			  Data="M 0 0 L 4 4 L 8 0 Z"/>-->
    <!--		</Grid>-->
    <!--		<ControlTemplate.Triggers>-->
    <!--			<Trigger Property="ToggleButton.IsMouseOver" Value="true">-->
    <!--				<Setter TargetName="Border" Property="Background" Value="{DynamicResource BorderBrush}" />-->
    <!--			</Trigger>-->
    <!--			<Trigger Property="ToggleButton.IsChecked" Value="true">-->
    <!--				<Setter TargetName="Border" Property="Background" Value="{DynamicResource BorderBrush}" />-->
    <!--			</Trigger>-->
    <!--			<Trigger Property="IsEnabled" Value="False">-->
    <!--				<Setter TargetName="Border" Property="Background" Value="{DynamicResource FontWhiteColor}" />-->
    <!--				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BorderBrush}" />-->
    <!--				<Setter Property="Foreground" Value="{DynamicResource PanelGradientBrush}"/>-->
    <!--				<Setter TargetName="Arrow" Property="Fill" Value="#888B0000" />-->
    <!--			</Trigger>-->
    <!--		</ControlTemplate.Triggers>-->
    <!--	</ControlTemplate>-->

    <!--	<ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">-->
    <!--		<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />-->
    <!--        <ControlTemplate.Triggers>-->
    <!--            <Trigger Property="IsEnabled" Value="true">-->
    <!--                <Setter Property="Background" Value="Red"/>-->
    <!--            </Trigger>-->
    <!--        </ControlTemplate.Triggers>-->
    <!--    </ControlTemplate>-->


    <!--        <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">-->
    <!--		<Setter Property="SnapsToDevicePixels" Value="true"/>-->
    <!--		<Setter Property="OverridesDefaultStyle" Value="true"/>-->
    <!--		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>-->
    <!--		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>-->
    <!--		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>-->
    <!--		<Setter Property="MinHeight" Value="20"/>-->
    <!---->
<!--		<Setter Property="Template">-->
    <!--			<Setter.Value>-->
    <!--				<ControlTemplate TargetType="{x:Type ComboBox}">-->
    <!--					<Grid>-->
    <!--						<ToggleButton-->
    <!--						  Name="ToggleButton"-->
    <!--						  Template="{DynamicResource ComboBoxToggleButton}"-->
    <!--						  Grid.Column="2"-->
    <!--						  Focusable="false"-->
    <!--						  IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"-->
    <!--						  ClickMode="Press">-->
    <!--						</ToggleButton>-->
    <!--                        <ContentPresenter-->
    <!--						  Name="ContentSite"-->
    <!--						  IsHitTestVisible="False" -->
    <!--						  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"-->
    <!--						  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"-->
    <!--						  Margin="3,3,23,3"-->
    <!--						  VerticalAlignment="Center"-->
    <!--						  HorizontalAlignment="Left" >-->
    <!--                            <ContentPresenter.Content>-->
    <!--                                <TextBlock Text="{TemplateBinding SelectionBoxItem}" Foreground="{DynamicResource FontBlackColor}" />-->
    <!--                            </ContentPresenter.Content>-->
    <!--                        </ContentPresenter>-->
    <!--                        <TextBox x:Name="PART_EditableTextBox"-->
    <!--						  Style="{x:Null}"-->
    <!--						  Template="{DynamicResource ComboBoxTextBox}"-->
    <!--						  HorizontalAlignment="Left"-->
    <!--						  VerticalAlignment="Center"-->
    <!--						  Margin="3,3,23,3"-->
    <!--						  Focusable="True" Foreground="{DynamicResource FontBlackColor}"-->
    <!--						  Background="Transparent"-->
    <!--						  Visibility="Hidden"-->
    <!--						  IsReadOnly="{TemplateBinding IsReadOnly}"/>-->
    <!--						<Popup-->
    <!--						  Name="Popup"-->
    <!--						  Placement="Bottom"-->
    <!--						  IsOpen="{TemplateBinding IsDropDownOpen}"-->
    <!--						  AllowsTransparency="True"-->
    <!--						  Focusable="False"-->
    <!--						  PopupAnimation="Slide">-->
    <!--							<Grid-->
    <!--							  Name="DropDown"-->
    <!--							  SnapsToDevicePixels="True"-->
    <!--							  MinWidth="{TemplateBinding ActualWidth}"-->
    <!--							  MaxHeight="{TemplateBinding MaxDropDownHeight}">-->
    <!--								<Border-->
    <!--								  x:Name="DropDownBorder" CornerRadius="5,5,5,5"-->
    <!--								  Background="{DynamicResource BorderBrush}"-->
    <!--								  BorderThickness="1"-->
    <!--								  BorderBrush="{DynamicResource BorderBrush}"/>-->
    <!--								<ScrollViewer Background="{DynamicResource PanelGradientBrush}" Margin="2,3,2,2" SnapsToDevicePixels="True">-->
    <!--									<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />-->
    <!--								</ScrollViewer>-->
    <!--							</Grid>-->
    <!--						</Popup>-->
    <!--					</Grid>-->
    <!--					<ControlTemplate.Triggers>-->
    <!--						<Trigger Property="HasItems" Value="false">-->
    <!--							<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>-->
    <!--						</Trigger>-->
    <!--						<Trigger Property="IsEnabled" Value="false">-->
    <!--							<Setter Property="Foreground" Value="{DynamicResource PanelGradientBrush}"/>-->
    <!--						</Trigger>-->
    <!--						<Trigger Property="IsGrouping" Value="true">-->
    <!--							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>-->
    <!--						</Trigger>-->
    <!--						<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">-->
    <!--							<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>-->
    <!--							<Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>-->
    <!--						</Trigger>-->
    <!--                        <Trigger Property="IsEditable" Value="false">-->
    <!--                            <Setter TargetName="ContentSite" Property="Visibility" Value="Visible"/>-->
    <!--                            <Setter TargetName="PART_EditableTextBox" Property="Visibility"    Value="Visible"/>-->
    <!--                            <Setter TargetName="PART_EditableTextBox" Property="IsReadOnly"    Value="True"/>-->
    <!---->
<!---->
    <!--                        </Trigger>-->
    <!--                        <Trigger Property="IsEditable" Value="true">-->
    <!--							<Setter Property="IsTabStop" Value="false"/>-->
    <!--							<Setter TargetName="PART_EditableTextBox" Property="Visibility"    Value="Visible"/>-->
    <!--							<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>-->
    <!--						</Trigger>-->
    <!--					</ControlTemplate.Triggers>-->
    <!--				</ControlTemplate>-->
    <!--			</Setter.Value>-->
    <!--		</Setter>-->
    <!--		<Style.Triggers>-->
    <!--		</Style.Triggers>-->
    <!--	</Style>-->

    <!--    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">-->
    <!--        <Setter Property="FontSize" Value="20"/>-->
    <!--        <Setter Property="FontWeight" Value="Bold"/>-->
    <!--        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>-->
    <!--    </Style>-->

    <ControlTemplate x:Key="ComboBoxToggleButton1" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Grid Grid.ColumnSpan="2">
                <Border x:Name="Bg" 
                        CornerRadius="3" 
                        BorderBrush="{DynamicResource RaisedHighlight}" 
                        BorderThickness="0,1,0,0"
                        Background="{DynamicResource CommonBackground}">
                </Border>
                <Border x:Name="Dn" 
                        Opacity="0" 
                        BorderThickness="0,1,0,1" 
                        CornerRadius="3" 
                        BorderBrush="#282828"
                        Background="{DynamicResource CommonDisabled}">
                </Border>
                <Border x:Name="Sh" 
                        BorderBrush="#000000" 
                        BorderThickness="0,0,0,1" 
                        CornerRadius="3" />
                <ContentPresenter x:Name="Content" Margin="0,0,0,2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
            </Grid>
            <Path x:Name="Arrow" Grid.Column="1" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#888888" Duration="0:0:0.1" />
                            <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" To="#686868" Duration="0:0:0.1" />
                            <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" To="#282828" Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Duration="0:0:0.1" />
                            <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" Duration="0:0:0.2" />
                            <ColorAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Background}"/>
                <Setter Property="Opacity" Value="0.75"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="ComboBoxTextBox1" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledFontColor}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">

        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MinWidth" Value="70"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItem1}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton
                              MinWidth="0" 
                              Name="ToggleButton"
                              Template="{DynamicResource ComboBoxToggleButton1}"
                              Foreground="{TemplateBinding Foreground}"
                              Grid.Column="2"
                              Focusable="false"
                              IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                              ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
                              Name="ContentSite"
                              IsHitTestVisible="False"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"                            
                              Margin="6,0,23,2"
                              TextBlock.Foreground="{TemplateBinding Foreground}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Left" />
                        <TextBox
                              x:Name="PART_EditableTextBox"
                              HorizontalAlignment="Left"
                              Margin="3,0,23,3"
                              VerticalAlignment="Center"
                              Background="Transparent"
                              Focusable="True"
                              Foreground="{TemplateBinding Foreground}"
                              IsReadOnly="{TemplateBinding IsReadOnly}"
                              Style="{x:Null}"
                              Template="{DynamicResource ComboBoxTextBox1}"/>
                        <Popup
                              Name="Popup"
                              Placement="Bottom"
                              VerticalOffset="0"
                              IsOpen="{TemplateBinding IsDropDownOpen}"
                              AllowsTransparency="True"
                              Focusable="False"
                              PopupAnimation="Fade">

                            <Themes:SystemDropShadowChrome Margin="0,0,5,5" CornerRadius="4">
                                <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" Background="#585858" CornerRadius="4" />
                                    <ScrollViewer  SnapsToDevicePixels="True">
                                        <primitives:IndexingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Themes:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledFontColor}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxItem1" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border" SnapsToDevicePixels="true">
                        <ContentPresenter Margin="4,2,4,3" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource HigtlightListBoxItem}" />
                        </Trigger>
                        <Trigger Property="primitives:IndexingStackPanel.StackLocation" Value="First">
                            <Setter TargetName="Border" Property="CornerRadius" Value="4,4,0,0" />
                        </Trigger>
                        <Trigger Property="primitives:IndexingStackPanel.StackLocation" Value="Last">
                            <Setter TargetName="Border" Property="CornerRadius" Value="0,0,4,4" />
                        </Trigger>
                        <Trigger Property="primitives:IndexingStackPanel.StackLocation" Value="FirstAndLast">
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledFontColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxPopup" TargetType="{x:Type ComboBox}">

        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="Margin" Value="1,0,0,0" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItem1}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton
                              MinWidth="0" 
                              Name="ToggleButton"
                              Template="{DynamicResource ComboBoxToggleButton1}"
                              Foreground="{TemplateBinding Foreground}"
                              Grid.Column="2"
                              Focusable="false"
                              IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                              ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
                              Name="ContentSite"
                              IsHitTestVisible="False"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"                            
                              Margin="6,0,23,2"
                              TextBlock.Foreground="{TemplateBinding Foreground}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Left" />
                        <TextBox
                              x:Name="PART_EditableTextBox"
                              HorizontalAlignment="Left"
                              Margin="3,0,23,3"
                              VerticalAlignment="Center"
                              Background="Transparent"
                              Focusable="True"
                              Foreground="{TemplateBinding Foreground}"
                              IsReadOnly="{TemplateBinding IsReadOnly}"
                              Style="{x:Null}"
                              Template="{DynamicResource ComboBoxTextBox1}"/>
                        <Popup
                              Name="Popup"
                              Placement="Bottom"
                              VerticalOffset="0"
                              IsOpen="{TemplateBinding IsDropDownOpen}"
                              AllowsTransparency="True"
                              Focusable="False"
                              PopupAnimation="Fade">

                            <Themes:SystemDropShadowChrome Margin="0,0,5,5" CornerRadius="4">
                                <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" Background="#585858" CornerRadius="4" />
                                    <ScrollViewer  SnapsToDevicePixels="True">
                                        <Components:IndexingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Themes:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledFontColor}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- end of ComboBox style -->


    <Style TargetType="{x:Type Label}">
        <Setter Property="Padding" Value="0 3 0 0" />
        <Setter Property="Margin" Value="0 0 0 0"/>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="LabelAlignRight">
        <Setter Property="Padding" Value="0 5 0 0" />
        <Setter Property="Margin" Value="0 0 0 0"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="LabelAlignLeft">
        <Setter Property="Padding" Value="0 5 0 0" />
        <Setter Property="Margin" Value="0 0 0 0"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="LabelAlignCenter">
        <Setter Property="Padding" Value="0 5 0 0" />
        <Setter Property="Margin" Value="0 0 0 0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <!--<Style TargetType="{x:Type Components:VRLink}" x:Key="VRLinkMenu">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="FontSize" Value="8" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="DockPanel.Dock" Value="Right" />
    </Style>-->


    <Style x:Key="SubMenuImage" TargetType="{x:Type Image}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Margin" Value="0,0,6,0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}, AncestorLevel=1}, Path=IsEnabled}" Value="True">
                <Setter Property="Opacity" Value="1"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ImageButton -->
    <!--<Style x:Key="ImageButton" TargetType="{x:Type Components:VRImageButton}">
		<Setter Property="Padding" Value="0" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Components:VRImageButton}">
					<Grid Background="Transparent">
						<Image Stretch="Fill" Source="{TemplateBinding Up}" />
						<Image Name="over" Stretch="Fill" Opacity="0" Source="{TemplateBinding Hover}" />
						<Image Name="down" Stretch="Fill" Opacity="0" Source="{TemplateBinding Down}" />
						<Image Name="active" Stretch="Fill" Opacity="0" Source="{TemplateBinding Down}" />
						<TextBlock Name="contentPresenterShadow" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="10.5pt" Foreground="#333" Margin="1,-3,0,0" Text="{TemplateBinding Content}" />
						<TextBlock Name="contentPresenter" Width="Auto" Height="Auto" Foreground="#FFFFFF" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="10.5pt" Margin="0,-5,0,0" Text="{TemplateBinding Content}" />
					</Grid>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="Mouse.MouseEnter">
							<EventTrigger.Actions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="over" Storyboard.TargetProperty="(Grid.Opacity)" />
									</Storyboard>
								</BeginStoryboard>
							</EventTrigger.Actions>
						</EventTrigger>
						<EventTrigger RoutedEvent="Mouse.MouseLeave">
							<EventTrigger.Actions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation To="0" Duration="0:0:0.4" Storyboard.TargetName="over" Storyboard.TargetProperty="(Grid.Opacity)" />
									</Storyboard>
								</BeginStoryboard>
							</EventTrigger.Actions>
						</EventTrigger>
						<EventTrigger RoutedEvent="Button.PreviewMouseLeftButtonDown">
							<EventTrigger.Actions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="down" Storyboard.TargetProperty="(Grid.Opacity)" />
									</Storyboard>
								</BeginStoryboard>
							</EventTrigger.Actions>
						</EventTrigger>
						<EventTrigger RoutedEvent="Button.PreviewMouseLeftButtonUp">
							<EventTrigger.Actions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation To="0" Duration="0:0:0.4" Storyboard.TargetName="down" Storyboard.TargetProperty="(Grid.Opacity)" />
									</Storyboard>
								</BeginStoryboard>
							</EventTrigger.Actions>
						</EventTrigger>
						<Trigger Property="Tag" Value="Active">
							<Setter TargetName="active" Property="Opacity" Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
					
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

    <!-- ImageButton -->



    <Style x:Key="RadioButtonCanDisable" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <StackPanel Orientation="Horizontal">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Grid Width="12" Height="12" >
                                    <Ellipse x:Name="Border" Fill="{DynamicResource PanelGradientBrush}" StrokeThickness="0.5" Stroke="{DynamicResource NormalBorderBrush}" />
                                    <Ellipse x:Name="CheckMark" Margin="3" Fill="{DynamicResource PanelGradientBrush}" />
                                </Grid>
                            </BulletDecorator.Bullet>
                        </BulletDecorator>
                        <TextBlock Margin="5,-1,0,0" x:Name="txtContent" VerticalAlignment="Center" Text="{TemplateBinding Content}"></TextBlock>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Fill" Value="{DynamicResource DarkBrush}" />
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Fill" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true">
                            <Setter Property="Foreground" TargetName="txtContent" Value="{DynamicResource FontColor}"/>
                            <Setter TargetName="Border" Property="Fill" Value="{DynamicResource DarkBrush}" />
                            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource PanelGradientBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" TargetName="txtContent" Value="{DynamicResource DisabledFontColor}"/>
                            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource DisabledFontColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxCanDisable" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Margin" Value="0, 0, 0, 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <StackPanel Orientation="Horizontal">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border" Width="12" Height="12" CornerRadius="0" Background="{DynamicResource PanelGradientBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}">
                                    <Path Width="7" Height="7" x:Name="CheckMark" SnapsToDevicePixels="False" Stroke="{DynamicResource FontColor}" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True"/>
                        </BulletDecorator>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledFontColor}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledFontColor}" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource DisabledFontColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledFontColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="RightPanelMouseOver_109x112" TargetType="{x:Type StackPanel}">
        <Style.Triggers>
            <!--            <MultiTrigger ></MultiTrigger>-->
            <Trigger Property="Button.IsMouseOver" Value="True">
                <Setter Property="Button.Background" Value="{DynamicResource MouseEnterBrush_109x112}" />
            </Trigger>
            <Trigger Property="Button.IsMouseOver" Value="False">
                <Setter Property="Button.Background" Value="{DynamicResource MouseLeaveBrush_109x112}" />
            </Trigger>
            <Trigger Property="Tag" Value="True">
                <Setter Property="Button.Background" Value="{DynamicResource MouseSelectedBrush_109x112}" />
                <!--                <Setter Property="Button.Effect">-->
                <!--                    <Setter.Value>-->
                <!--                        <DropShadowEffect Color="#0F5A9D" Direction="315" ShadowDepth="5" BlurRadius="0.7" Opacity="0.8"></DropShadowEffect>-->
                <!--                    </Setter.Value>-->
                <!--                </Setter> -->
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="RightPanelListElement" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource ListElementBorderMouseLeave}" />
        <Setter Property="Background" Value="{DynamicResource ListElementBackgroundMouseLeave}" />
        <Style.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ListElementBorderMouseEnter}" />
                <Setter Property="Button.Background" Value="{DynamicResource ListElementBackgroundMouseEnter}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DataBaseSetup style -->

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Margin" Value="5,5,5,5" />
        <Setter Property="BorderBrush" Value="#D5DFE5"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4"/>
                        <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True"/>
                        </Border>
                        <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2"/>
                        <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding Path="ActualWidth" ElementName="Header"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <Border BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
                            </Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledFontColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ExplanationTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Width" Value="452" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextAlignment" Value="Justify" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledFontColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FormTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="5"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource FontColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledFontColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
    <Style x:Key="SimpleScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Simple Simple SliderThumb - The Thumb is the draggable part of a Slider-->
    <Style x:Key="SimpleSliderThumb"  TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Height" Value="14"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Ellipse x:Name="Ellipse" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" Value="{DynamicResource MouseOverBrush}" TargetName="Ellipse"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Ellipse"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Simple Simple Slider
	Similiar to ScrollBar this template uses Track to layout the draggable Thumb which has an up and down repeat button
	It uses Simple SliderThumb and SimpleScrollRepeatButtonStyle for the page up and down repeat buttons -->
    <Style TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- TickBar shows the ticks for Slider -->
                        <TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}"/>
                        <Border Grid.Row="1" Margin="0" x:Name="Border" Height="4" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>

                        <!-- The Track lays out the repeat buttons and thumb -->
                        <Track Grid.Row="1" x:Name="PART_Track">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleSliderThumb}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                        </Trigger>

                        <!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <!-- Track rotates itself based on orientation so need to force it back -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>