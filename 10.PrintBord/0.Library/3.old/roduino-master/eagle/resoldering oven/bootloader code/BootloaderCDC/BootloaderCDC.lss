
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00007da8  00000e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da8  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080018c  0080018c  00000ec8  2**0
                  ALLOC
  3 .debug_aranges 000002c8  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000755  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004902  00000000  00000000  000018e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001163  00000000  00000000  000061e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000468c  00000000  00000000  0000734a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  0000b9d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000021d9  00000000  00000000  0000bde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002d76  00000000  00000000  0000dfc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 000007e6  00000000  00000000  00010d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  0001151d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	18 c4       	rjmp	.+2096   	; 0x785a <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	4e c0       	rjmp	.+156    	; 0x70e2 <__bad_interrupt>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	e8 ea       	ldi	r30, 0xA8	; 168
    70c0:	fd e7       	ldi	r31, 0x7D	; 125
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <__do_copy_data+0x10>
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0
    70c8:	ac 38       	cpi	r26, 0x8C	; 140
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <__do_copy_data+0xc>

000070ce <__do_clear_bss>:
    70ce:	11 e0       	ldi	r17, 0x01	; 1
    70d0:	ac e8       	ldi	r26, 0x8C	; 140
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	ac 39       	cpi	r26, 0x9C	; 156
    70da:	b1 07       	cpc	r27, r17
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	f4 d2       	rcall	.+1512   	; 0x76c8 <main>
    70e0:	61 c6       	rjmp	.+3266   	; 0x7da4 <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70e4:	84 e0       	ldi	r24, 0x04	; 4
    70e6:	80 93 e9 00 	sts	0x00E9, r24
    70ea:	0d c0       	rjmp	.+26     	; 0x7106 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    70ec:	80 91 e8 00 	lds	r24, 0x00E8
    70f0:	8b 77       	andi	r24, 0x7B	; 123
    70f2:	80 93 e8 00 	sts	0x00E8, r24
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    70f6:	03 c0       	rjmp	.+6      	; 0x70fe <FetchNextCommandByte+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    70f8:	8e b3       	in	r24, 0x1e	; 30
    70fa:	88 23       	and	r24, r24
    70fc:	59 f0       	breq	.+22     	; 0x7114 <FetchNextCommandByte+0x30>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    70fe:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7102:	82 ff       	sbrs	r24, 2
    7104:	f9 cf       	rjmp	.-14     	; 0x70f8 <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7106:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    710a:	85 ff       	sbrs	r24, 5
    710c:	ef cf       	rjmp	.-34     	; 0x70ec <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    710e:	80 91 f1 00 	lds	r24, 0x00F1
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    7112:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return 0;
    7114:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    7116:	08 95       	ret

00007118 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7118:	93 e0       	ldi	r25, 0x03	; 3
    711a:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    711e:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    7122:	95 fd       	sbrc	r25, 5
    7124:	0d c0       	rjmp	.+26     	; 0x7140 <WriteNextResponseByte+0x28>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7126:	90 91 e8 00 	lds	r25, 0x00E8
    712a:	9e 77       	andi	r25, 0x7E	; 126
    712c:	90 93 e8 00 	sts	0x00E8, r25
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    7130:	03 c0       	rjmp	.+6      	; 0x7138 <WriteNextResponseByte+0x20>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7132:	9e b3       	in	r25, 0x1e	; 30
    7134:	99 23       	and	r25, r25
    7136:	31 f0       	breq	.+12     	; 0x7144 <WriteNextResponseByte+0x2c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7138:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    713c:	90 ff       	sbrs	r25, 0
    713e:	f9 cf       	rjmp	.-14     	; 0x7132 <WriteNextResponseByte+0x1a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7140:	80 93 f1 00 	sts	0x00F1, r24
    7144:	08 95       	ret

00007146 <exit_bootloader>:

void (*app_start)(void) = 0x0000;

void exit_bootloader()
{
    PORTE = 0;
    7146:	1e b8       	out	0x0e, r1	; 14
    app_start();
    7148:	e0 91 8c 01 	lds	r30, 0x018C
    714c:	f0 91 8d 01 	lds	r31, 0x018D
    7150:	09 95       	icall
}
    7152:	08 95       	ret

00007154 <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    7154:	84 b7       	in	r24, 0x34	; 52
    7156:	87 7f       	andi	r24, 0xF7	; 247
    7158:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    715a:	88 e1       	ldi	r24, 0x18	; 24
    715c:	0f b6       	in	r0, 0x3f	; 63
    715e:	f8 94       	cli
    7160:	80 93 60 00 	sts	0x0060, r24
    7164:	10 92 60 00 	sts	0x0060, r1
    7168:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    716a:	81 e0       	ldi	r24, 0x01	; 1
    716c:	90 e8       	ldi	r25, 0x80	; 128
    716e:	0f b6       	in	r0, 0x3f	; 63
    7170:	f8 94       	cli
    7172:	90 93 61 00 	sts	0x0061, r25
    7176:	80 93 61 00 	sts	0x0061, r24
    717a:	0f be       	out	0x3f, r0	; 63

	/* Enable clock division */
	clock_prescale_set(clock_div_2);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    717c:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    717e:	82 e0       	ldi	r24, 0x02	; 2
    7180:	85 bf       	out	0x35, r24	; 53
	//LEDs_Init();
	
	/* Bootloader active LED toggle timer initialization */
	//TIMSK1 = (1 << TOIE1);
	//TCCR1B = ((1 << CS11) | (1 << CS10));	
}
    7182:	53 c3       	rjmp	.+1702   	; 0x782a <USB_Init>

00007184 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    7184:	82 e0       	ldi	r24, 0x02	; 2
    7186:	61 ec       	ldi	r22, 0xC1	; 193
    7188:	42 e0       	ldi	r20, 0x02	; 2
    718a:	e2 d2       	rcall	.+1476   	; 0x7750 <Endpoint_ConfigureEndpoint_Prv>
    718c:	83 e0       	ldi	r24, 0x03	; 3
    718e:	61 e8       	ldi	r22, 0x81	; 129
    7190:	42 e1       	ldi	r20, 0x12	; 18
    7192:	de d2       	rcall	.+1468   	; 0x7750 <Endpoint_ConfigureEndpoint_Prv>
    7194:	84 e0       	ldi	r24, 0x04	; 4
    7196:	60 e8       	ldi	r22, 0x80	; 128
    7198:	42 e1       	ldi	r20, 0x12	; 18
	                           ENDPOINT_BANK_SINGLE);

	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);
}
    719a:	da c2       	rjmp	.+1460   	; 0x7750 <Endpoint_ConfigureEndpoint_Prv>

0000719c <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    719c:	80 91 94 01 	lds	r24, 0x0194
    71a0:	98 2f       	mov	r25, r24
    71a2:	9f 77       	andi	r25, 0x7F	; 127
    71a4:	91 32       	cpi	r25, 0x21	; 33
    71a6:	49 f5       	brne	.+82     	; 0x71fa <EVENT_USB_Device_ControlRequest+0x5e>

	/* Activity - toggle indicator LEDs */
	//LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    71a8:	90 91 95 01 	lds	r25, 0x0195
    71ac:	90 32       	cpi	r25, 0x20	; 32
    71ae:	a1 f0       	breq	.+40     	; 0x71d8 <EVENT_USB_Device_ControlRequest+0x3c>
    71b0:	91 32       	cpi	r25, 0x21	; 33
    71b2:	19 f5       	brne	.+70     	; 0x71fa <EVENT_USB_Device_ControlRequest+0x5e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    71b4:	81 3a       	cpi	r24, 0xA1	; 161
    71b6:	09 f5       	brne	.+66     	; 0x71fa <EVENT_USB_Device_ControlRequest+0x5e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    71b8:	80 91 e8 00 	lds	r24, 0x00E8
    71bc:	87 7f       	andi	r24, 0xF7	; 247
    71be:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    71c2:	89 e0       	ldi	r24, 0x09	; 9
    71c4:	91 e0       	ldi	r25, 0x01	; 1
    71c6:	67 e0       	ldi	r22, 0x07	; 7
    71c8:	70 e0       	ldi	r23, 0x00	; 0
    71ca:	1f d5       	rcall	.+2622   	; 0x7c0a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    71cc:	80 91 e8 00 	lds	r24, 0x00E8
    71d0:	8b 77       	andi	r24, 0x7B	; 123
    71d2:	80 93 e8 00 	sts	0x00E8, r24
    71d6:	08 95       	ret
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    71d8:	81 32       	cpi	r24, 0x21	; 33
    71da:	79 f4       	brne	.+30     	; 0x71fa <EVENT_USB_Device_ControlRequest+0x5e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    71dc:	80 91 e8 00 	lds	r24, 0x00E8
    71e0:	87 7f       	andi	r24, 0xF7	; 247
    71e2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    71e6:	89 e0       	ldi	r24, 0x09	; 9
    71e8:	91 e0       	ldi	r25, 0x01	; 1
    71ea:	67 e0       	ldi	r22, 0x07	; 7
    71ec:	70 e0       	ldi	r23, 0x00	; 0
    71ee:	6e d5       	rcall	.+2780   	; 0x7ccc <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    71f0:	80 91 e8 00 	lds	r24, 0x00E8
    71f4:	8e 77       	andi	r24, 0x7E	; 126
    71f6:	80 93 e8 00 	sts	0x00E8, r24
    71fa:	08 95       	ret

000071fc <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    71fc:	4f 92       	push	r4
    71fe:	5f 92       	push	r5
    7200:	6f 92       	push	r6
    7202:	7f 92       	push	r7
    7204:	8f 92       	push	r8
    7206:	9f 92       	push	r9
    7208:	af 92       	push	r10
    720a:	bf 92       	push	r11
    720c:	cf 92       	push	r12
    720e:	df 92       	push	r13
    7210:	ef 92       	push	r14
    7212:	ff 92       	push	r15
    7214:	0f 93       	push	r16
    7216:	1f 93       	push	r17
    7218:	cf 93       	push	r28
    721a:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    721c:	84 e0       	ldi	r24, 0x04	; 4
    721e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7222:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    7226:	82 ff       	sbrs	r24, 2
    7228:	3e c2       	rjmp	.+1148   	; 0x76a6 <CDC_Task+0x4aa>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    722a:	5c df       	rcall	.-328    	; 0x70e4 <FetchNextCommandByte>
    722c:	18 2f       	mov	r17, r24

	if (Command == 'E')
    722e:	85 34       	cpi	r24, 0x45	; 69
    7230:	19 f4       	brne	.+6      	; 0x7238 <CDC_Task+0x3c>
	{
		RunBootloader = false;
    7232:	10 92 08 01 	sts	0x0108, r1
    7236:	03 c0       	rjmp	.+6      	; 0x723e <CDC_Task+0x42>
	
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
    7238:	84 35       	cpi	r24, 0x54	; 84
    723a:	19 f4       	brne	.+6      	; 0x7242 <CDC_Task+0x46>
	{
		FetchNextCommandByte();
    723c:	53 df       	rcall	.-346    	; 0x70e4 <FetchNextCommandByte>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
    723e:	8d e0       	ldi	r24, 0x0D	; 13
    7240:	08 c2       	rjmp	.+1040   	; 0x7652 <CDC_Task+0x456>
	}
	else if ((Command == 'L') || (Command == 'P'))
    7242:	8c 34       	cpi	r24, 0x4C	; 76
    7244:	e1 f3       	breq	.-8      	; 0x723e <CDC_Task+0x42>
    7246:	80 35       	cpi	r24, 0x50	; 80
    7248:	d1 f3       	breq	.-12     	; 0x723e <CDC_Task+0x42>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
    724a:	84 37       	cpi	r24, 0x74	; 116
    724c:	21 f4       	brne	.+8      	; 0x7256 <CDC_Task+0x5a>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
    724e:	84 e4       	ldi	r24, 0x44	; 68
    7250:	63 df       	rcall	.-314    	; 0x7118 <WriteNextResponseByte>
		WriteNextResponseByte(0x00);
    7252:	80 e0       	ldi	r24, 0x00	; 0
    7254:	fe c1       	rjmp	.+1020   	; 0x7652 <CDC_Task+0x456>
	}
	else if (Command == 'a')
    7256:	81 36       	cpi	r24, 0x61	; 97
    7258:	11 f4       	brne	.+4      	; 0x725e <CDC_Task+0x62>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
    725a:	89 e5       	ldi	r24, 0x59	; 89
    725c:	fa c1       	rjmp	.+1012   	; 0x7652 <CDC_Task+0x456>
	}
	else if (Command == 'A')
    725e:	81 34       	cpi	r24, 0x41	; 65
    7260:	01 f5       	brne	.+64     	; 0x72a2 <CDC_Task+0xa6>
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
    7262:	40 df       	rcall	.-384    	; 0x70e4 <FetchNextCommandByte>
    7264:	18 2f       	mov	r17, r24
		CurrAddress  |= (FetchNextCommandByte() << 1);
    7266:	3e df       	rcall	.-388    	; 0x70e4 <FetchNextCommandByte>
    7268:	28 2f       	mov	r18, r24
    726a:	30 e0       	ldi	r19, 0x00	; 0
    726c:	22 0f       	add	r18, r18
    726e:	33 1f       	adc	r19, r19
    7270:	44 27       	eor	r20, r20
    7272:	37 fd       	sbrc	r19, 7
    7274:	40 95       	com	r20
    7276:	54 2f       	mov	r21, r20
		WriteNextResponseByte('Y');
	}
	else if (Command == 'A')
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
    7278:	71 2f       	mov	r23, r17
    727a:	77 0f       	add	r23, r23
    727c:	60 e0       	ldi	r22, 0x00	; 0
    727e:	cb 01       	movw	r24, r22
    7280:	aa 27       	eor	r26, r26
    7282:	97 fd       	sbrc	r25, 7
    7284:	a0 95       	com	r26
    7286:	ba 2f       	mov	r27, r26
		CurrAddress  |= (FetchNextCommandByte() << 1);
    7288:	28 2b       	or	r18, r24
    728a:	39 2b       	or	r19, r25
    728c:	4a 2b       	or	r20, r26
    728e:	5b 2b       	or	r21, r27
    7290:	20 93 8e 01 	sts	0x018E, r18
    7294:	30 93 8f 01 	sts	0x018F, r19
    7298:	40 93 90 01 	sts	0x0190, r20
    729c:	50 93 91 01 	sts	0x0191, r21
    72a0:	ce cf       	rjmp	.-100    	; 0x723e <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
    72a2:	80 37       	cpi	r24, 0x70	; 112
    72a4:	11 f4       	brne	.+4      	; 0x72aa <CDC_Task+0xae>
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
    72a6:	83 e5       	ldi	r24, 0x53	; 83
    72a8:	d4 c1       	rjmp	.+936    	; 0x7652 <CDC_Task+0x456>
	}
	else if (Command == 'S')
    72aa:	83 35       	cpi	r24, 0x53	; 83
    72ac:	49 f4       	brne	.+18     	; 0x72c0 <CDC_Task+0xc4>
    72ae:	c0 e0       	ldi	r28, 0x00	; 0
    72b0:	d1 e0       	ldi	r29, 0x01	; 1
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    72b2:	89 91       	ld	r24, Y+
    72b4:	31 df       	rcall	.-414    	; 0x7118 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    72b6:	21 e0       	ldi	r18, 0x01	; 1
    72b8:	c7 30       	cpi	r28, 0x07	; 7
    72ba:	d2 07       	cpc	r29, r18
    72bc:	d1 f7       	brne	.-12     	; 0x72b2 <CDC_Task+0xb6>
    72be:	ca c1       	rjmp	.+916    	; 0x7654 <CDC_Task+0x458>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
    72c0:	86 35       	cpi	r24, 0x56	; 86
    72c2:	21 f4       	brne	.+8      	; 0x72cc <CDC_Task+0xd0>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    72c4:	81 e3       	ldi	r24, 0x31	; 49
    72c6:	28 df       	rcall	.-432    	; 0x7118 <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    72c8:	80 e3       	ldi	r24, 0x30	; 48
    72ca:	c3 c1       	rjmp	.+902    	; 0x7652 <CDC_Task+0x456>
	}
	else if (Command == 's')
    72cc:	83 37       	cpi	r24, 0x73	; 115
    72ce:	31 f4       	brne	.+12     	; 0x72dc <CDC_Task+0xe0>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    72d0:	87 e8       	ldi	r24, 0x87	; 135
    72d2:	22 df       	rcall	.-444    	; 0x7118 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_2);
    72d4:	85 e9       	ldi	r24, 0x95	; 149
    72d6:	20 df       	rcall	.-448    	; 0x7118 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_1);
    72d8:	8e e1       	ldi	r24, 0x1E	; 30
    72da:	bb c1       	rjmp	.+886    	; 0x7652 <CDC_Task+0x456>
	}
	else if (Command == 'e')
    72dc:	85 36       	cpi	r24, 0x65	; 101
    72de:	01 f5       	brne	.+64     	; 0x7320 <CDC_Task+0x124>
    72e0:	80 e0       	ldi	r24, 0x00	; 0
    72e2:	90 e0       	ldi	r25, 0x00	; 0
    72e4:	a0 e0       	ldi	r26, 0x00	; 0
    72e6:	b0 e0       	ldi	r27, 0x00	; 0
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    72e8:	33 e0       	ldi	r19, 0x03	; 3
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
    72ea:	25 e0       	ldi	r18, 0x05	; 5
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
		WriteNextResponseByte(AVR_SIGNATURE_2);
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
    72ec:	fc 01       	movw	r30, r24
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    72ee:	30 93 57 00 	sts	0x0057, r19
    72f2:	e8 95       	spm
			boot_spm_busy_wait();
    72f4:	07 b6       	in	r0, 0x37	; 55
    72f6:	00 fc       	sbrc	r0, 0
    72f8:	fd cf       	rjmp	.-6      	; 0x72f4 <CDC_Task+0xf8>
			boot_page_write(CurrFlashAddress);
    72fa:	20 93 57 00 	sts	0x0057, r18
    72fe:	e8 95       	spm
			boot_spm_busy_wait();
    7300:	07 b6       	in	r0, 0x37	; 55
    7302:	00 fc       	sbrc	r0, 0
    7304:	fd cf       	rjmp	.-6      	; 0x7300 <CDC_Task+0x104>
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    7306:	80 58       	subi	r24, 0x80	; 128
    7308:	9f 4f       	sbci	r25, 0xFF	; 255
    730a:	af 4f       	sbci	r26, 0xFF	; 255
    730c:	bf 4f       	sbci	r27, 0xFF	; 255
    730e:	80 30       	cpi	r24, 0x00	; 0
    7310:	40 e7       	ldi	r20, 0x70	; 112
    7312:	94 07       	cpc	r25, r20
    7314:	40 e0       	ldi	r20, 0x00	; 0
    7316:	a4 07       	cpc	r26, r20
    7318:	40 e0       	ldi	r20, 0x00	; 0
    731a:	b4 07       	cpc	r27, r20
    731c:	39 f7       	brne	.-50     	; 0x72ec <CDC_Task+0xf0>
    731e:	8f cf       	rjmp	.-226    	; 0x723e <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == 'l')
    7320:	8c 36       	cpi	r24, 0x6C	; 108
    7322:	51 f4       	brne	.+20     	; 0x7338 <CDC_Task+0x13c>
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
    7324:	df de       	rcall	.-578    	; 0x70e4 <FetchNextCommandByte>
    7326:	80 95       	com	r24
    7328:	99 e0       	ldi	r25, 0x09	; 9
    732a:	e1 e0       	ldi	r30, 0x01	; 1
    732c:	f0 e0       	ldi	r31, 0x00	; 0
    732e:	08 2e       	mov	r0, r24
    7330:	90 93 57 00 	sts	0x0057, r25
    7334:	e8 95       	spm
    7336:	83 cf       	rjmp	.-250    	; 0x723e <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
    7338:	82 37       	cpi	r24, 0x72	; 114
    733a:	39 f4       	brne	.+14     	; 0x734a <CDC_Task+0x14e>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    733c:	e1 e0       	ldi	r30, 0x01	; 1
    733e:	f0 e0       	ldi	r31, 0x00	; 0
    7340:	89 e0       	ldi	r24, 0x09	; 9
    7342:	80 93 57 00 	sts	0x0057, r24
    7346:	84 91       	lpm	r24, Z
    7348:	84 c1       	rjmp	.+776    	; 0x7652 <CDC_Task+0x456>
	}
	else if (Command == 'F')
    734a:	86 34       	cpi	r24, 0x46	; 70
    734c:	39 f4       	brne	.+14     	; 0x735c <CDC_Task+0x160>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    734e:	e0 e0       	ldi	r30, 0x00	; 0
    7350:	f0 e0       	ldi	r31, 0x00	; 0
    7352:	89 e0       	ldi	r24, 0x09	; 9
    7354:	80 93 57 00 	sts	0x0057, r24
    7358:	84 91       	lpm	r24, Z
    735a:	7b c1       	rjmp	.+758    	; 0x7652 <CDC_Task+0x456>
	}
	else if (Command == 'N')
    735c:	8e 34       	cpi	r24, 0x4E	; 78
    735e:	39 f4       	brne	.+14     	; 0x736e <CDC_Task+0x172>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    7360:	e3 e0       	ldi	r30, 0x03	; 3
    7362:	f0 e0       	ldi	r31, 0x00	; 0
    7364:	89 e0       	ldi	r24, 0x09	; 9
    7366:	80 93 57 00 	sts	0x0057, r24
    736a:	84 91       	lpm	r24, Z
    736c:	72 c1       	rjmp	.+740    	; 0x7652 <CDC_Task+0x456>
	}
	else if (Command == 'Q')
    736e:	81 35       	cpi	r24, 0x51	; 81
    7370:	39 f4       	brne	.+14     	; 0x7380 <CDC_Task+0x184>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7372:	e2 e0       	ldi	r30, 0x02	; 2
    7374:	f0 e0       	ldi	r31, 0x00	; 0
    7376:	89 e0       	ldi	r24, 0x09	; 9
    7378:	80 93 57 00 	sts	0x0057, r24
    737c:	84 91       	lpm	r24, Z
    737e:	69 c1       	rjmp	.+722    	; 0x7652 <CDC_Task+0x456>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
    7380:	82 36       	cpi	r24, 0x62	; 98
    7382:	31 f4       	brne	.+12     	; 0x7390 <CDC_Task+0x194>
	{
		WriteNextResponseByte('Y');
    7384:	89 e5       	ldi	r24, 0x59	; 89
    7386:	c8 de       	rcall	.-624    	; 0x7118 <WriteNextResponseByte>

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    7388:	80 e0       	ldi	r24, 0x00	; 0
    738a:	c6 de       	rcall	.-628    	; 0x7118 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    738c:	80 e8       	ldi	r24, 0x80	; 128
    738e:	61 c1       	rjmp	.+706    	; 0x7652 <CDC_Task+0x456>
	}
	else if ((Command == 'B') || (Command == 'g'))
    7390:	82 34       	cpi	r24, 0x42	; 66
    7392:	19 f0       	breq	.+6      	; 0x739a <CDC_Task+0x19e>
    7394:	87 36       	cpi	r24, 0x67	; 103
    7396:	09 f0       	breq	.+2      	; 0x739a <CDC_Task+0x19e>
    7398:	d1 c0       	rjmp	.+418    	; 0x753c <CDC_Task+0x340>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    739a:	a4 de       	rcall	.-696    	; 0x70e4 <FetchNextCommandByte>
    739c:	c8 2e       	mov	r12, r24
	BlockSize |=  FetchNextCommandByte();
    739e:	a2 de       	rcall	.-700    	; 0x70e4 <FetchNextCommandByte>
    73a0:	e8 2e       	mov	r14, r24

	MemoryType =  FetchNextCommandByte();
    73a2:	a0 de       	rcall	.-704    	; 0x70e4 <FetchNextCommandByte>
    73a4:	d8 2e       	mov	r13, r24

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    73a6:	85 54       	subi	r24, 0x45	; 69
    73a8:	82 30       	cpi	r24, 0x02	; 2
    73aa:	08 f0       	brcs	.+2      	; 0x73ae <CDC_Task+0x1b2>
    73ac:	51 c1       	rjmp	.+674    	; 0x7650 <CDC_Task+0x454>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    73ae:	3c 2d       	mov	r19, r12
    73b0:	20 e0       	ldi	r18, 0x00	; 0
	BlockSize |=  FetchNextCommandByte();
    73b2:	ce 2d       	mov	r28, r14
    73b4:	d0 e0       	ldi	r29, 0x00	; 0
    73b6:	c2 2b       	or	r28, r18
    73b8:	d3 2b       	or	r29, r19

		return;
	}

	/* Check if command is to read memory */
	if (Command == 'g')
    73ba:	17 36       	cpi	r17, 0x67	; 103
    73bc:	09 f0       	breq	.+2      	; 0x73c0 <CDC_Task+0x1c4>
    73be:	44 c0       	rjmp	.+136    	; 0x7448 <CDC_Task+0x24c>
	{
		/* Re-enable RWW section */
		boot_rww_enable();
    73c0:	81 e1       	ldi	r24, 0x11	; 17
    73c2:	80 93 57 00 	sts	0x0057, r24
    73c6:	e8 95       	spm
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    73c8:	cc 24       	eor	r12, r12

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    73ca:	bb 24       	eor	r11, r11
    73cc:	b3 94       	inc	r11
    73ce:	38 c0       	rjmp	.+112    	; 0x7440 <CDC_Task+0x244>
    73d0:	e0 90 8e 01 	lds	r14, 0x018E
    73d4:	f0 90 8f 01 	lds	r15, 0x018F
    73d8:	00 91 90 01 	lds	r16, 0x0190
    73dc:	10 91 91 01 	lds	r17, 0x0191
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    73e0:	8d 2d       	mov	r24, r13
    73e2:	86 34       	cpi	r24, 0x46	; 70
    73e4:	b9 f4       	brne	.+46     	; 0x7414 <CDC_Task+0x218>
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    73e6:	ec 2d       	mov	r30, r12
    73e8:	f0 e0       	ldi	r31, 0x00	; 0
    73ea:	ee 29       	or	r30, r14
    73ec:	ff 29       	or	r31, r15
    73ee:	84 91       	lpm	r24, Z
    73f0:	93 de       	rcall	.-730    	; 0x7118 <WriteNextResponseByte>
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    73f2:	cc 20       	and	r12, r12
    73f4:	69 f0       	breq	.+26     	; 0x7410 <CDC_Task+0x214>
				  CurrAddress += 2;
    73f6:	d8 01       	movw	r26, r16
    73f8:	c7 01       	movw	r24, r14
    73fa:	02 96       	adiw	r24, 0x02	; 2
    73fc:	a1 1d       	adc	r26, r1
    73fe:	b1 1d       	adc	r27, r1
    7400:	80 93 8e 01 	sts	0x018E, r24
    7404:	90 93 8f 01 	sts	0x018F, r25
    7408:	a0 93 90 01 	sts	0x0190, r26
    740c:	b0 93 91 01 	sts	0x0191, r27

				HighByte = !HighByte;
    7410:	cb 24       	eor	r12, r11
    7412:	15 c0       	rjmp	.+42     	; 0x743e <CDC_Task+0x242>
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    7414:	d8 01       	movw	r26, r16
    7416:	c7 01       	movw	r24, r14
    7418:	b6 95       	lsr	r27
    741a:	a7 95       	ror	r26
    741c:	97 95       	ror	r25
    741e:	87 95       	ror	r24
    7420:	ab d4       	rcall	.+2390   	; 0x7d78 <__eerd_byte_m32u4>
    7422:	7a de       	rcall	.-780    	; 0x7118 <WriteNextResponseByte>

				/* Increment the address counter after use */
				CurrAddress += 2;
    7424:	d8 01       	movw	r26, r16
    7426:	c7 01       	movw	r24, r14
    7428:	02 96       	adiw	r24, 0x02	; 2
    742a:	a1 1d       	adc	r26, r1
    742c:	b1 1d       	adc	r27, r1
    742e:	80 93 8e 01 	sts	0x018E, r24
    7432:	90 93 8f 01 	sts	0x018F, r25
    7436:	a0 93 90 01 	sts	0x0190, r26
    743a:	b0 93 91 01 	sts	0x0191, r27
    743e:	21 97       	sbiw	r28, 0x01	; 1
	if (Command == 'g')
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    7440:	20 97       	sbiw	r28, 0x00	; 0
    7442:	09 f0       	breq	.+2      	; 0x7446 <CDC_Task+0x24a>
    7444:	c5 cf       	rjmp	.-118    	; 0x73d0 <CDC_Task+0x1d4>
    7446:	06 c1       	rjmp	.+524    	; 0x7654 <CDC_Task+0x458>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    7448:	40 90 8e 01 	lds	r4, 0x018E
    744c:	50 90 8f 01 	lds	r5, 0x018F
    7450:	60 90 90 01 	lds	r6, 0x0190
    7454:	70 90 91 01 	lds	r7, 0x0191

		if (MemoryType == 'F')
    7458:	ed 2d       	mov	r30, r13
    745a:	e6 34       	cpi	r30, 0x46	; 70
    745c:	09 f0       	breq	.+2      	; 0x7460 <CDC_Task+0x264>
    745e:	5a c0       	rjmp	.+180    	; 0x7514 <CDC_Task+0x318>
		{
			boot_page_erase(PageStartAddress);
    7460:	83 e0       	ldi	r24, 0x03	; 3
    7462:	f2 01       	movw	r30, r4
    7464:	80 93 57 00 	sts	0x0057, r24
    7468:	e8 95       	spm
			boot_spm_busy_wait();
    746a:	07 b6       	in	r0, 0x37	; 55
    746c:	00 fc       	sbrc	r0, 0
    746e:	fd cf       	rjmp	.-6      	; 0x746a <CDC_Task+0x26e>
    7470:	51 c0       	rjmp	.+162    	; 0x7514 <CDC_Task+0x318>
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    7472:	fd 2d       	mov	r31, r13
    7474:	f6 34       	cpi	r31, 0x46	; 70
    7476:	49 f5       	brne	.+82     	; 0x74ca <CDC_Task+0x2ce>
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    7478:	cc 20       	and	r12, r12
    747a:	19 f1       	breq	.+70     	; 0x74c2 <CDC_Task+0x2c6>
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    747c:	e0 90 8e 01 	lds	r14, 0x018E
    7480:	f0 90 8f 01 	lds	r15, 0x018F
    7484:	00 91 90 01 	lds	r16, 0x0190
    7488:	10 91 91 01 	lds	r17, 0x0191
    748c:	2b de       	rcall	.-938    	; 0x70e4 <FetchNextCommandByte>
    748e:	98 2e       	mov	r9, r24
    7490:	88 24       	eor	r8, r8
    7492:	8b 2d       	mov	r24, r11
    7494:	90 e0       	ldi	r25, 0x00	; 0
    7496:	88 29       	or	r24, r8
    7498:	99 29       	or	r25, r9
    749a:	f7 01       	movw	r30, r14
    749c:	0c 01       	movw	r0, r24
    749e:	a0 92 57 00 	sts	0x0057, r10
    74a2:	e8 95       	spm
    74a4:	11 24       	eor	r1, r1

					/* Increment the address counter after use */
					CurrAddress += 2;
    74a6:	d8 01       	movw	r26, r16
    74a8:	c7 01       	movw	r24, r14
    74aa:	02 96       	adiw	r24, 0x02	; 2
    74ac:	a1 1d       	adc	r26, r1
    74ae:	b1 1d       	adc	r27, r1
    74b0:	80 93 8e 01 	sts	0x018E, r24
    74b4:	90 93 8f 01 	sts	0x018F, r25
    74b8:	a0 93 90 01 	sts	0x0190, r26
    74bc:	b0 93 91 01 	sts	0x0191, r27
    74c0:	02 c0       	rjmp	.+4      	; 0x74c6 <CDC_Task+0x2ca>
				}
				else
				{
					LowByte = FetchNextCommandByte();
    74c2:	10 de       	rcall	.-992    	; 0x70e4 <FetchNextCommandByte>
    74c4:	b8 2e       	mov	r11, r24
				}
				
				HighByte = !HighByte;
    74c6:	ca 24       	eor	r12, r10
    74c8:	23 c0       	rjmp	.+70     	; 0x7510 <CDC_Task+0x314>
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    74ca:	e0 90 8e 01 	lds	r14, 0x018E
    74ce:	f0 90 8f 01 	lds	r15, 0x018F
    74d2:	00 91 90 01 	lds	r16, 0x0190
    74d6:	10 91 91 01 	lds	r17, 0x0191
    74da:	16 95       	lsr	r17
    74dc:	07 95       	ror	r16
    74de:	f7 94       	ror	r15
    74e0:	e7 94       	ror	r14
    74e2:	00 de       	rcall	.-1024   	; 0x70e4 <FetchNextCommandByte>
    74e4:	68 2f       	mov	r22, r24
    74e6:	c7 01       	movw	r24, r14
    74e8:	4f d4       	rcall	.+2206   	; 0x7d88 <__eewr_byte_m32u4>

				/* Increment the address counter after use */
				CurrAddress += 2;
    74ea:	80 91 8e 01 	lds	r24, 0x018E
    74ee:	90 91 8f 01 	lds	r25, 0x018F
    74f2:	a0 91 90 01 	lds	r26, 0x0190
    74f6:	b0 91 91 01 	lds	r27, 0x0191
    74fa:	02 96       	adiw	r24, 0x02	; 2
    74fc:	a1 1d       	adc	r26, r1
    74fe:	b1 1d       	adc	r27, r1
    7500:	80 93 8e 01 	sts	0x018E, r24
    7504:	90 93 8f 01 	sts	0x018F, r25
    7508:	a0 93 90 01 	sts	0x0190, r26
    750c:	b0 93 91 01 	sts	0x0191, r27
    7510:	21 97       	sbiw	r28, 0x01	; 1
    7512:	04 c0       	rjmp	.+8      	; 0x751c <CDC_Task+0x320>
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == 'F')
    7514:	bb 24       	eor	r11, r11
    7516:	cc 24       	eor	r12, r12
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    7518:	aa 24       	eor	r10, r10
    751a:	a3 94       	inc	r10
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    751c:	20 97       	sbiw	r28, 0x00	; 0
    751e:	09 f0       	breq	.+2      	; 0x7522 <CDC_Task+0x326>
    7520:	a8 cf       	rjmp	.-176    	; 0x7472 <CDC_Task+0x276>
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    7522:	fd 2d       	mov	r31, r13
    7524:	f6 34       	cpi	r31, 0x46	; 70
    7526:	09 f0       	breq	.+2      	; 0x752a <CDC_Task+0x32e>
    7528:	8a ce       	rjmp	.-748    	; 0x723e <CDC_Task+0x42>
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    752a:	85 e0       	ldi	r24, 0x05	; 5
    752c:	f2 01       	movw	r30, r4
    752e:	80 93 57 00 	sts	0x0057, r24
    7532:	e8 95       	spm

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    7534:	07 b6       	in	r0, 0x37	; 55
    7536:	00 fc       	sbrc	r0, 0
    7538:	fd cf       	rjmp	.-6      	; 0x7534 <CDC_Task+0x338>
    753a:	81 ce       	rjmp	.-766    	; 0x723e <CDC_Task+0x42>
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
    753c:	83 34       	cpi	r24, 0x43	; 67
    753e:	71 f4       	brne	.+28     	; 0x755c <CDC_Task+0x360>
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    7540:	c0 91 8e 01 	lds	r28, 0x018E
    7544:	d0 91 8f 01 	lds	r29, 0x018F
    7548:	cd dd       	rcall	.-1126   	; 0x70e4 <FetchNextCommandByte>
    754a:	90 e0       	ldi	r25, 0x00	; 0
    754c:	21 e0       	ldi	r18, 0x01	; 1
    754e:	fe 01       	movw	r30, r28
    7550:	0c 01       	movw	r0, r24
    7552:	20 93 57 00 	sts	0x0057, r18
    7556:	e8 95       	spm
    7558:	11 24       	eor	r1, r1
    755a:	71 ce       	rjmp	.-798    	; 0x723e <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
    755c:	83 36       	cpi	r24, 0x63	; 99
    755e:	a9 f4       	brne	.+42     	; 0x758a <CDC_Task+0x38e>
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    7560:	e0 90 8e 01 	lds	r14, 0x018E
    7564:	f0 90 8f 01 	lds	r15, 0x018F
    7568:	00 91 90 01 	lds	r16, 0x0190
    756c:	10 91 91 01 	lds	r17, 0x0191
    7570:	b9 dd       	rcall	.-1166   	; 0x70e4 <FetchNextCommandByte>
    7572:	f7 01       	movw	r30, r14
    7574:	e1 60       	ori	r30, 0x01	; 1
    7576:	90 e0       	ldi	r25, 0x00	; 0
    7578:	21 e0       	ldi	r18, 0x01	; 1
    757a:	0c 01       	movw	r0, r24
    757c:	20 93 57 00 	sts	0x0057, r18
    7580:	e8 95       	spm
    7582:	11 24       	eor	r1, r1

		/* Increment the address */
		CurrAddress += 2;
    7584:	d8 01       	movw	r26, r16
    7586:	c7 01       	movw	r24, r14
    7588:	35 c0       	rjmp	.+106    	; 0x75f4 <CDC_Task+0x3f8>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
    758a:	8d 36       	cpi	r24, 0x6D	; 109
    758c:	61 f4       	brne	.+24     	; 0x75a6 <CDC_Task+0x3aa>
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
    758e:	e0 91 8e 01 	lds	r30, 0x018E
    7592:	f0 91 8f 01 	lds	r31, 0x018F
    7596:	85 e0       	ldi	r24, 0x05	; 5
    7598:	80 93 57 00 	sts	0x0057, r24
    759c:	e8 95       	spm

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
    759e:	07 b6       	in	r0, 0x37	; 55
    75a0:	00 fc       	sbrc	r0, 0
    75a2:	fd cf       	rjmp	.-6      	; 0x759e <CDC_Task+0x3a2>
    75a4:	4c ce       	rjmp	.-872    	; 0x723e <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
    75a6:	82 35       	cpi	r24, 0x52	; 82
    75a8:	59 f4       	brne	.+22     	; 0x75c0 <CDC_Task+0x3c4>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    75aa:	e0 91 8e 01 	lds	r30, 0x018E
    75ae:	f0 91 8f 01 	lds	r31, 0x018F
    75b2:	c5 91       	lpm	r28, Z+
    75b4:	d4 91       	lpm	r29, Z
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    75b6:	7e 01       	movw	r14, r28
    75b8:	8f 2d       	mov	r24, r15
    75ba:	ae dd       	rcall	.-1188   	; 0x7118 <WriteNextResponseByte>
		WriteNextResponseByte(ProgramWord & 0xFF);
    75bc:	8c 2f       	mov	r24, r28
    75be:	49 c0       	rjmp	.+146    	; 0x7652 <CDC_Task+0x456>
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
    75c0:	84 34       	cpi	r24, 0x44	; 68
    75c2:	21 f5       	brne	.+72     	; 0x760c <CDC_Task+0x410>
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    75c4:	e0 90 8e 01 	lds	r14, 0x018E
    75c8:	f0 90 8f 01 	lds	r15, 0x018F
    75cc:	00 91 90 01 	lds	r16, 0x0190
    75d0:	10 91 91 01 	lds	r17, 0x0191
    75d4:	16 95       	lsr	r17
    75d6:	07 95       	ror	r16
    75d8:	f7 94       	ror	r15
    75da:	e7 94       	ror	r14
    75dc:	83 dd       	rcall	.-1274   	; 0x70e4 <FetchNextCommandByte>
    75de:	68 2f       	mov	r22, r24
    75e0:	c7 01       	movw	r24, r14
    75e2:	d2 d3       	rcall	.+1956   	; 0x7d88 <__eewr_byte_m32u4>

		/* Increment the address after use */
		CurrAddress += 2;
    75e4:	80 91 8e 01 	lds	r24, 0x018E
    75e8:	90 91 8f 01 	lds	r25, 0x018F
    75ec:	a0 91 90 01 	lds	r26, 0x0190
    75f0:	b0 91 91 01 	lds	r27, 0x0191
    75f4:	02 96       	adiw	r24, 0x02	; 2
    75f6:	a1 1d       	adc	r26, r1
    75f8:	b1 1d       	adc	r27, r1
    75fa:	80 93 8e 01 	sts	0x018E, r24
    75fe:	90 93 8f 01 	sts	0x018F, r25
    7602:	a0 93 90 01 	sts	0x0190, r26
    7606:	b0 93 91 01 	sts	0x0191, r27
    760a:	19 ce       	rjmp	.-974    	; 0x723e <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
    760c:	84 36       	cpi	r24, 0x64	; 100
    760e:	f1 f4       	brne	.+60     	; 0x764c <CDC_Task+0x450>
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    7610:	e0 90 8e 01 	lds	r14, 0x018E
    7614:	f0 90 8f 01 	lds	r15, 0x018F
    7618:	00 91 90 01 	lds	r16, 0x0190
    761c:	10 91 91 01 	lds	r17, 0x0191
    7620:	d8 01       	movw	r26, r16
    7622:	c7 01       	movw	r24, r14
    7624:	b6 95       	lsr	r27
    7626:	a7 95       	ror	r26
    7628:	97 95       	ror	r25
    762a:	87 95       	ror	r24
    762c:	a5 d3       	rcall	.+1866   	; 0x7d78 <__eerd_byte_m32u4>
    762e:	74 dd       	rcall	.-1304   	; 0x7118 <WriteNextResponseByte>

		/* Increment the address after use */
		CurrAddress += 2;
    7630:	d8 01       	movw	r26, r16
    7632:	c7 01       	movw	r24, r14
    7634:	02 96       	adiw	r24, 0x02	; 2
    7636:	a1 1d       	adc	r26, r1
    7638:	b1 1d       	adc	r27, r1
    763a:	80 93 8e 01 	sts	0x018E, r24
    763e:	90 93 8f 01 	sts	0x018F, r25
    7642:	a0 93 90 01 	sts	0x0190, r26
    7646:	b0 93 91 01 	sts	0x0191, r27
    764a:	04 c0       	rjmp	.+8      	; 0x7654 <CDC_Task+0x458>
	}
	#endif
	else if (Command != 27)
    764c:	8b 31       	cpi	r24, 0x1B	; 27
    764e:	11 f0       	breq	.+4      	; 0x7654 <CDC_Task+0x458>
	{
		/* Unknown (non-sync) command, return fail code */
		WriteNextResponseByte('?');
    7650:	8f e3       	ldi	r24, 0x3F	; 63
    7652:	62 dd       	rcall	.-1340   	; 0x7118 <WriteNextResponseByte>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7654:	83 e0       	ldi	r24, 0x03	; 3
    7656:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    765a:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    765e:	80 91 e8 00 	lds	r24, 0x00E8
    7662:	8e 77       	andi	r24, 0x7E	; 126
    7664:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    7668:	95 ff       	sbrs	r25, 5
    766a:	04 c0       	rjmp	.+8      	; 0x7674 <CDC_Task+0x478>
    766c:	10 c0       	rjmp	.+32     	; 0x768e <CDC_Task+0x492>
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    766e:	8e b3       	in	r24, 0x1e	; 30
    7670:	88 23       	and	r24, r24
    7672:	c9 f0       	breq	.+50     	; 0x76a6 <CDC_Task+0x4aa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7674:	80 91 e8 00 	lds	r24, 0x00E8
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
    7678:	80 ff       	sbrs	r24, 0
    767a:	f9 cf       	rjmp	.-14     	; 0x766e <CDC_Task+0x472>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    767c:	80 91 e8 00 	lds	r24, 0x00E8
    7680:	8e 77       	andi	r24, 0x7E	; 126
    7682:	80 93 e8 00 	sts	0x00E8, r24
    7686:	03 c0       	rjmp	.+6      	; 0x768e <CDC_Task+0x492>
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    7688:	8e b3       	in	r24, 0x1e	; 30
    768a:	88 23       	and	r24, r24
    768c:	61 f0       	breq	.+24     	; 0x76a6 <CDC_Task+0x4aa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    768e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    7692:	80 ff       	sbrs	r24, 0
    7694:	f9 cf       	rjmp	.-14     	; 0x7688 <CDC_Task+0x48c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7696:	84 e0       	ldi	r24, 0x04	; 4
    7698:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    769c:	80 91 e8 00 	lds	r24, 0x00E8
    76a0:	8b 77       	andi	r24, 0x7B	; 123
    76a2:	80 93 e8 00 	sts	0x00E8, r24
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
    76a6:	df 91       	pop	r29
    76a8:	cf 91       	pop	r28
    76aa:	1f 91       	pop	r17
    76ac:	0f 91       	pop	r16
    76ae:	ff 90       	pop	r15
    76b0:	ef 90       	pop	r14
    76b2:	df 90       	pop	r13
    76b4:	cf 90       	pop	r12
    76b6:	bf 90       	pop	r11
    76b8:	af 90       	pop	r10
    76ba:	9f 90       	pop	r9
    76bc:	8f 90       	pop	r8
    76be:	7f 90       	pop	r7
    76c0:	6f 90       	pop	r6
    76c2:	5f 90       	pop	r5
    76c4:	4f 90       	pop	r4
    76c6:	08 95       	ret

000076c8 <main>:
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
    PORTE |= _BV(2);
    76c8:	72 9a       	sbi	0x0e, 2	; 14
    if (bit_is_set(PINE, 2))
    76ca:	62 9b       	sbis	0x0c, 2	; 12
    76cc:	02 c0       	rjmp	.+4      	; 0x76d2 <main+0xa>
    {
        exit_bootloader();
    76ce:	3b dd       	rcall	.-1418   	; 0x7146 <exit_bootloader>
    76d0:	ff cf       	rjmp	.-2      	; 0x76d0 <main+0x8>
        while (1);
    }

	/* Setup hardware required for the bootloader */
	SetupHardware();
    76d2:	40 dd       	rcall	.-1408   	; 0x7154 <SetupHardware>

	/* Turn on first LED on the board to indicate that the bootloader has started */
	//LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	sei();
    76d4:	78 94       	sei

	while (RunBootloader)
    76d6:	02 c0       	rjmp	.+4      	; 0x76dc <main+0x14>
	{
		CDC_Task();
    76d8:	91 dd       	rcall	.-1246   	; 0x71fc <CDC_Task>
		USB_USBTask();
    76da:	3c d3       	rcall	.+1656   	; 0x7d54 <USB_USBTask>
	//LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	sei();

	while (RunBootloader)
    76dc:	80 91 08 01 	lds	r24, 0x0108
    76e0:	88 23       	and	r24, r24
    76e2:	d1 f7       	brne	.-12     	; 0x76d8 <main+0x10>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    76e4:	80 91 e0 00 	lds	r24, 0x00E0
    76e8:	81 60       	ori	r24, 0x01	; 1
    76ea:	80 93 e0 00 	sts	0x00E0, r24

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
    76ee:	2c e0       	ldi	r18, 0x0C	; 12
    76f0:	88 e1       	ldi	r24, 0x18	; 24
    76f2:	90 e0       	ldi	r25, 0x00	; 0
    76f4:	0f b6       	in	r0, 0x3f	; 63
    76f6:	f8 94       	cli
    76f8:	a8 95       	wdr
    76fa:	80 93 60 00 	sts	0x0060, r24
    76fe:	0f be       	out	0x3f, r0	; 63
    7700:	20 93 60 00 	sts	0x0060, r18
    7704:	ff cf       	rjmp	.-2      	; 0x7704 <main+0x3c>

00007706 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    7706:	92 30       	cpi	r25, 0x02	; 2
    7708:	49 f0       	breq	.+18     	; 0x771c <CALLBACK_USB_GetDescriptor+0x16>
    770a:	93 30       	cpi	r25, 0x03	; 3
    770c:	61 f0       	breq	.+24     	; 0x7726 <CALLBACK_USB_GetDescriptor+0x20>
    770e:	91 30       	cpi	r25, 0x01	; 1
    7710:	89 f0       	breq	.+34     	; 0x7734 <CALLBACK_USB_GetDescriptor+0x2e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    7712:	20 e0       	ldi	r18, 0x00	; 0
    7714:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    7716:	80 e0       	ldi	r24, 0x00	; 0
    7718:	90 e0       	ldi	r25, 0x00	; 0
    771a:	15 c0       	rjmp	.+42     	; 0x7746 <CALLBACK_USB_GetDescriptor+0x40>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    771c:	2e e3       	ldi	r18, 0x3E	; 62
    771e:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    7720:	82 e2       	ldi	r24, 0x22	; 34
    7722:	91 e0       	ldi	r25, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    7724:	10 c0       	rjmp	.+32     	; 0x7746 <CALLBACK_USB_GetDescriptor+0x40>
		case DTYPE_String:
			if (!(DescriptorNumber))
    7726:	88 23       	and	r24, r24
    7728:	51 f4       	brne	.+20     	; 0x773e <CALLBACK_USB_GetDescriptor+0x38>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    772a:	24 e0       	ldi	r18, 0x04	; 4
    772c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    772e:	80 e6       	ldi	r24, 0x60	; 96
    7730:	91 e0       	ldi	r25, 0x01	; 1
    7732:	09 c0       	rjmp	.+18     	; 0x7746 <CALLBACK_USB_GetDescriptor+0x40>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    7734:	22 e1       	ldi	r18, 0x12	; 18
    7736:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    7738:	80 e1       	ldi	r24, 0x10	; 16
    773a:	91 e0       	ldi	r25, 0x01	; 1
    773c:	04 c0       	rjmp	.+8      	; 0x7746 <CALLBACK_USB_GetDescriptor+0x40>
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    773e:	26 e2       	ldi	r18, 0x26	; 38
    7740:	30 e0       	ldi	r19, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
    7742:	84 e6       	ldi	r24, 0x64	; 100
    7744:	91 e0       	ldi	r25, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    7746:	fa 01       	movw	r30, r20
    7748:	91 83       	std	Z+1, r25	; 0x01
    774a:	80 83       	st	Z, r24
	return Size;
}
    774c:	c9 01       	movw	r24, r18
    774e:	08 95       	ret

00007750 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7750:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    7754:	eb ee       	ldi	r30, 0xEB	; 235
    7756:	f0 e0       	ldi	r31, 0x00	; 0
    7758:	80 81       	ld	r24, Z
    775a:	81 60       	ori	r24, 0x01	; 1
    775c:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    775e:	ed ee       	ldi	r30, 0xED	; 237
    7760:	f0 e0       	ldi	r31, 0x00	; 0
    7762:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    7764:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    7768:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    776a:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    776e:	88 1f       	adc	r24, r24
    7770:	88 27       	eor	r24, r24
    7772:	88 1f       	adc	r24, r24
    7774:	08 95       	ret

00007776 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    7776:	80 91 94 01 	lds	r24, 0x0194
    777a:	87 ff       	sbrs	r24, 7
    777c:	11 c0       	rjmp	.+34     	; 0x77a0 <Endpoint_ClearStatusStage+0x2a>
    777e:	03 c0       	rjmp	.+6      	; 0x7786 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7780:	8e b3       	in	r24, 0x1e	; 30
    7782:	88 23       	and	r24, r24
    7784:	b1 f0       	breq	.+44     	; 0x77b2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7786:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    778a:	82 ff       	sbrs	r24, 2
    778c:	f9 cf       	rjmp	.-14     	; 0x7780 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    778e:	80 91 e8 00 	lds	r24, 0x00E8
    7792:	8b 77       	andi	r24, 0x7B	; 123
    7794:	80 93 e8 00 	sts	0x00E8, r24
    7798:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    779a:	8e b3       	in	r24, 0x1e	; 30
    779c:	88 23       	and	r24, r24
    779e:	49 f0       	breq	.+18     	; 0x77b2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    77a0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    77a4:	80 ff       	sbrs	r24, 0
    77a6:	f9 cf       	rjmp	.-14     	; 0x779a <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    77a8:	80 91 e8 00 	lds	r24, 0x00E8
    77ac:	8e 77       	andi	r24, 0x7E	; 126
    77ae:	80 93 e8 00 	sts	0x00E8, r24
    77b2:	08 95       	ret

000077b4 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    77b4:	0f 93       	push	r16
    77b6:	1f 93       	push	r17
    77b8:	cf 93       	push	r28
    77ba:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    77bc:	41 d0       	rcall	.+130    	; 0x7840 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    77be:	48 d0       	rcall	.+144    	; 0x7850 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    77c0:	c8 ed       	ldi	r28, 0xD8	; 216
    77c2:	d0 e0       	ldi	r29, 0x00	; 0
    77c4:	88 81       	ld	r24, Y

				USBCON = (Temp & ~(1 << USBE));
    77c6:	98 2f       	mov	r25, r24
    77c8:	9f 77       	andi	r25, 0x7F	; 127
    77ca:	98 83       	st	Y, r25
				USBCON = (Temp |  (1 << USBE));
    77cc:	80 68       	ori	r24, 0x80	; 128
    77ce:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    77d0:	88 81       	ld	r24, Y
    77d2:	8f 7d       	andi	r24, 0xDF	; 223
    77d4:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    77d6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
    77d8:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
    77da:	10 92 92 01 	sts	0x0192, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    77de:	00 ee       	ldi	r16, 0xE0	; 224
    77e0:	10 e0       	ldi	r17, 0x00	; 0
    77e2:	f8 01       	movw	r30, r16
    77e4:	80 81       	ld	r24, Z
    77e6:	8b 7f       	andi	r24, 0xFB	; 251
    77e8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    77ea:	88 81       	ld	r24, Y
    77ec:	81 60       	ori	r24, 0x01	; 1
    77ee:	88 83       	st	Y, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    77f0:	80 e0       	ldi	r24, 0x00	; 0
    77f2:	60 e0       	ldi	r22, 0x00	; 0
    77f4:	42 e0       	ldi	r20, 0x02	; 2
    77f6:	ac df       	rcall	.-168    	; 0x7750 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    77f8:	e1 ee       	ldi	r30, 0xE1	; 225
    77fa:	f0 e0       	ldi	r31, 0x00	; 0
    77fc:	80 81       	ld	r24, Z
    77fe:	8e 7f       	andi	r24, 0xFE	; 254
    7800:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7802:	e2 ee       	ldi	r30, 0xE2	; 226
    7804:	f0 e0       	ldi	r31, 0x00	; 0
    7806:	80 81       	ld	r24, Z
    7808:	81 60       	ori	r24, 0x01	; 1
    780a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    780c:	80 81       	ld	r24, Z
    780e:	88 60       	ori	r24, 0x08	; 8
    7810:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7812:	f8 01       	movw	r30, r16
    7814:	80 81       	ld	r24, Z
    7816:	8e 7f       	andi	r24, 0xFE	; 254
    7818:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    781a:	88 81       	ld	r24, Y
    781c:	80 61       	ori	r24, 0x10	; 16
    781e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7820:	df 91       	pop	r29
    7822:	cf 91       	pop	r28
    7824:	1f 91       	pop	r17
    7826:	0f 91       	pop	r16
    7828:	08 95       	ret

0000782a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    782a:	e7 ed       	ldi	r30, 0xD7	; 215
    782c:	f0 e0       	ldi	r31, 0x00	; 0
    782e:	80 81       	ld	r24, Z
    7830:	81 60       	ori	r24, 0x01	; 1
    7832:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    7834:	8a e4       	ldi	r24, 0x4A	; 74
    7836:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7838:	81 e0       	ldi	r24, 0x01	; 1
    783a:	80 93 93 01 	sts	0x0193, r24

	USB_ResetInterface();
}
    783e:	ba cf       	rjmp	.-140    	; 0x77b4 <USB_ResetInterface>

00007840 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7840:	e8 ed       	ldi	r30, 0xD8	; 216
    7842:	f0 e0       	ldi	r31, 0x00	; 0
    7844:	80 81       	ld	r24, Z
    7846:	8e 7f       	andi	r24, 0xFE	; 254
    7848:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    784a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    784e:	08 95       	ret

00007850 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7850:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7854:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    7858:	08 95       	ret

0000785a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    785a:	1f 92       	push	r1
    785c:	0f 92       	push	r0
    785e:	0f b6       	in	r0, 0x3f	; 63
    7860:	0f 92       	push	r0
    7862:	11 24       	eor	r1, r1
    7864:	2f 93       	push	r18
    7866:	3f 93       	push	r19
    7868:	4f 93       	push	r20
    786a:	5f 93       	push	r21
    786c:	6f 93       	push	r22
    786e:	7f 93       	push	r23
    7870:	8f 93       	push	r24
    7872:	9f 93       	push	r25
    7874:	af 93       	push	r26
    7876:	bf 93       	push	r27
    7878:	ef 93       	push	r30
    787a:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    787c:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7880:	80 ff       	sbrs	r24, 0
    7882:	1c c0       	rjmp	.+56     	; 0x78bc <__vector_10+0x62>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7884:	80 91 d8 00 	lds	r24, 0x00D8
    7888:	80 ff       	sbrs	r24, 0
    788a:	18 c0       	rjmp	.+48     	; 0x78bc <__vector_10+0x62>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    788c:	80 91 da 00 	lds	r24, 0x00DA
    7890:	8e 7f       	andi	r24, 0xFE	; 254
    7892:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7896:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    789a:	80 ff       	sbrs	r24, 0
    789c:	0c c0       	rjmp	.+24     	; 0x78b6 <__vector_10+0x5c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    789e:	80 e1       	ldi	r24, 0x10	; 16
    78a0:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    78a2:	89 b5       	in	r24, 0x29	; 41
    78a4:	82 60       	ori	r24, 0x02	; 2
    78a6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    78a8:	09 b4       	in	r0, 0x29	; 41
    78aa:	00 fe       	sbrs	r0, 0
    78ac:	fd cf       	rjmp	.-6      	; 0x78a8 <__vector_10+0x4e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    78ae:	81 e0       	ldi	r24, 0x01	; 1
    78b0:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    78b2:	aa d1       	rcall	.+852    	; 0x7c08 <USB_Event_Stub>
    78b4:	03 c0       	rjmp	.+6      	; 0x78bc <__vector_10+0x62>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    78b6:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    78b8:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    78ba:	a6 d1       	rcall	.+844    	; 0x7c08 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    78bc:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    78c0:	80 ff       	sbrs	r24, 0
    78c2:	17 c0       	rjmp	.+46     	; 0x78f2 <__vector_10+0x98>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    78c4:	80 91 e2 00 	lds	r24, 0x00E2
    78c8:	80 ff       	sbrs	r24, 0
    78ca:	13 c0       	rjmp	.+38     	; 0x78f2 <__vector_10+0x98>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    78cc:	80 91 e2 00 	lds	r24, 0x00E2
    78d0:	8e 7f       	andi	r24, 0xFE	; 254
    78d2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    78d6:	80 91 e2 00 	lds	r24, 0x00E2
    78da:	80 61       	ori	r24, 0x10	; 16
    78dc:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    78e0:	80 91 d8 00 	lds	r24, 0x00D8
    78e4:	80 62       	ori	r24, 0x20	; 32
    78e6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    78ea:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    78ec:	85 e0       	ldi	r24, 0x05	; 5
    78ee:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    78f0:	8b d1       	rcall	.+790    	; 0x7c08 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    78f2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    78f6:	84 ff       	sbrs	r24, 4
    78f8:	2d c0       	rjmp	.+90     	; 0x7954 <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    78fa:	80 91 e2 00 	lds	r24, 0x00E2
    78fe:	84 ff       	sbrs	r24, 4
    7900:	29 c0       	rjmp	.+82     	; 0x7954 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    7902:	80 e1       	ldi	r24, 0x10	; 16
    7904:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    7906:	89 b5       	in	r24, 0x29	; 41
    7908:	82 60       	ori	r24, 0x02	; 2
    790a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    790c:	09 b4       	in	r0, 0x29	; 41
    790e:	00 fe       	sbrs	r0, 0
    7910:	fd cf       	rjmp	.-6      	; 0x790c <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7912:	80 91 d8 00 	lds	r24, 0x00D8
    7916:	8f 7d       	andi	r24, 0xDF	; 223
    7918:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    791c:	80 91 e1 00 	lds	r24, 0x00E1
    7920:	8f 7e       	andi	r24, 0xEF	; 239
    7922:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7926:	80 91 e2 00 	lds	r24, 0x00E2
    792a:	8f 7e       	andi	r24, 0xEF	; 239
    792c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7930:	80 91 e2 00 	lds	r24, 0x00E2
    7934:	81 60       	ori	r24, 0x01	; 1
    7936:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
    793a:	80 91 92 01 	lds	r24, 0x0192
    793e:	88 23       	and	r24, r24
    7940:	21 f4       	brne	.+8      	; 0x794a <__vector_10+0xf0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7942:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7946:	87 ff       	sbrs	r24, 7
    7948:	02 c0       	rjmp	.+4      	; 0x794e <__vector_10+0xf4>
    794a:	84 e0       	ldi	r24, 0x04	; 4
    794c:	01 c0       	rjmp	.+2      	; 0x7950 <__vector_10+0xf6>
    794e:	81 e0       	ldi	r24, 0x01	; 1
    7950:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7952:	5a d1       	rcall	.+692    	; 0x7c08 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7954:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7958:	83 ff       	sbrs	r24, 3
    795a:	21 c0       	rjmp	.+66     	; 0x799e <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    795c:	80 91 e2 00 	lds	r24, 0x00E2
    7960:	83 ff       	sbrs	r24, 3
    7962:	1d c0       	rjmp	.+58     	; 0x799e <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7964:	80 91 e1 00 	lds	r24, 0x00E1
    7968:	87 7f       	andi	r24, 0xF7	; 247
    796a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
    796e:	82 e0       	ldi	r24, 0x02	; 2
    7970:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
    7972:	10 92 92 01 	sts	0x0192, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7976:	80 91 e1 00 	lds	r24, 0x00E1
    797a:	8e 7f       	andi	r24, 0xFE	; 254
    797c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7980:	80 91 e2 00 	lds	r24, 0x00E2
    7984:	8e 7f       	andi	r24, 0xFE	; 254
    7986:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    798a:	80 91 e2 00 	lds	r24, 0x00E2
    798e:	80 61       	ori	r24, 0x10	; 16
    7990:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    7994:	80 e0       	ldi	r24, 0x00	; 0
    7996:	60 e0       	ldi	r22, 0x00	; 0
    7998:	42 e0       	ldi	r20, 0x02	; 2
    799a:	da de       	rcall	.-588    	; 0x7750 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    799c:	35 d1       	rcall	.+618    	; 0x7c08 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    799e:	ff 91       	pop	r31
    79a0:	ef 91       	pop	r30
    79a2:	bf 91       	pop	r27
    79a4:	af 91       	pop	r26
    79a6:	9f 91       	pop	r25
    79a8:	8f 91       	pop	r24
    79aa:	7f 91       	pop	r23
    79ac:	6f 91       	pop	r22
    79ae:	5f 91       	pop	r21
    79b0:	4f 91       	pop	r20
    79b2:	3f 91       	pop	r19
    79b4:	2f 91       	pop	r18
    79b6:	0f 90       	pop	r0
    79b8:	0f be       	out	0x3f, r0	; 63
    79ba:	0f 90       	pop	r0
    79bc:	1f 90       	pop	r1
    79be:	18 95       	reti

000079c0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    79c0:	0f 93       	push	r16
    79c2:	1f 93       	push	r17
    79c4:	df 93       	push	r29
    79c6:	cf 93       	push	r28
    79c8:	00 d0       	rcall	.+0      	; 0x79ca <USB_Device_ProcessControlRequest+0xa>
    79ca:	cd b7       	in	r28, 0x3d	; 61
    79cc:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    79ce:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    79d2:	80 93 94 01 	sts	0x0194, r24
    79d6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    79da:	80 93 95 01 	sts	0x0195, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    79de:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[1] = UEDATX;
    79e2:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    79e6:	e6 e9       	ldi	r30, 0x96	; 150
    79e8:	f1 e0       	ldi	r31, 0x01	; 1
    79ea:	90 93 96 01 	sts	0x0196, r25
    79ee:	81 83       	std	Z+1, r24	; 0x01
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    79f0:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[1] = UEDATX;
    79f4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    79f8:	90 93 98 01 	sts	0x0198, r25
    79fc:	83 83       	std	Z+3, r24	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    79fe:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[1] = UEDATX;
    7a02:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    7a06:	90 93 9a 01 	sts	0x019A, r25
    7a0a:	85 83       	std	Z+5, r24	; 0x05

	EVENT_USB_Device_ControlRequest();
    7a0c:	c7 db       	rcall	.-2162   	; 0x719c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7a0e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    7a12:	83 ff       	sbrs	r24, 3
    7a14:	e4 c0       	rjmp	.+456    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7a16:	80 91 94 01 	lds	r24, 0x0194

		switch (USB_ControlRequest.bRequest)
    7a1a:	90 91 95 01 	lds	r25, 0x0195
    7a1e:	95 30       	cpi	r25, 0x05	; 5
    7a20:	09 f4       	brne	.+2      	; 0x7a24 <USB_Device_ProcessControlRequest+0x64>
    7a22:	6b c0       	rjmp	.+214    	; 0x7afa <USB_Device_ProcessControlRequest+0x13a>
    7a24:	96 30       	cpi	r25, 0x06	; 6
    7a26:	40 f4       	brcc	.+16     	; 0x7a38 <USB_Device_ProcessControlRequest+0x78>
    7a28:	91 30       	cpi	r25, 0x01	; 1
    7a2a:	61 f1       	breq	.+88     	; 0x7a84 <USB_Device_ProcessControlRequest+0xc4>
    7a2c:	91 30       	cpi	r25, 0x01	; 1
    7a2e:	70 f0       	brcs	.+28     	; 0x7a4c <USB_Device_ProcessControlRequest+0x8c>
    7a30:	93 30       	cpi	r25, 0x03	; 3
    7a32:	09 f0       	breq	.+2      	; 0x7a36 <USB_Device_ProcessControlRequest+0x76>
    7a34:	d4 c0       	rjmp	.+424    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
    7a36:	26 c0       	rjmp	.+76     	; 0x7a84 <USB_Device_ProcessControlRequest+0xc4>
    7a38:	98 30       	cpi	r25, 0x08	; 8
    7a3a:	09 f4       	brne	.+2      	; 0x7a3e <USB_Device_ProcessControlRequest+0x7e>
    7a3c:	a3 c0       	rjmp	.+326    	; 0x7b84 <USB_Device_ProcessControlRequest+0x1c4>
    7a3e:	99 30       	cpi	r25, 0x09	; 9
    7a40:	09 f4       	brne	.+2      	; 0x7a44 <USB_Device_ProcessControlRequest+0x84>
    7a42:	b2 c0       	rjmp	.+356    	; 0x7ba8 <USB_Device_ProcessControlRequest+0x1e8>
    7a44:	96 30       	cpi	r25, 0x06	; 6
    7a46:	09 f0       	breq	.+2      	; 0x7a4a <USB_Device_ProcessControlRequest+0x8a>
    7a48:	ca c0       	rjmp	.+404    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
    7a4a:	7c c0       	rjmp	.+248    	; 0x7b44 <USB_Device_ProcessControlRequest+0x184>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7a4c:	80 38       	cpi	r24, 0x80	; 128
    7a4e:	09 f4       	brne	.+2      	; 0x7a52 <USB_Device_ProcessControlRequest+0x92>
    7a50:	c6 c0       	rjmp	.+396    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
    7a52:	82 38       	cpi	r24, 0x82	; 130
    7a54:	09 f0       	breq	.+2      	; 0x7a58 <USB_Device_ProcessControlRequest+0x98>
    7a56:	c3 c0       	rjmp	.+390    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7a58:	80 91 98 01 	lds	r24, 0x0198
    7a5c:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7a5e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7a62:	90 91 eb 00 	lds	r25, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7a66:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7a6a:	80 91 e8 00 	lds	r24, 0x00E8
    7a6e:	87 7f       	andi	r24, 0xF7	; 247
    7a70:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7a74:	81 e0       	ldi	r24, 0x01	; 1
    7a76:	95 ff       	sbrs	r25, 5
    7a78:	80 e0       	ldi	r24, 0x00	; 0
    7a7a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    7a7e:	10 92 f1 00 	sts	0x00F1, r1
    7a82:	8b c0       	rjmp	.+278    	; 0x7b9a <USB_Device_ProcessControlRequest+0x1da>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7a84:	88 23       	and	r24, r24
    7a86:	19 f0       	breq	.+6      	; 0x7a8e <USB_Device_ProcessControlRequest+0xce>
    7a88:	82 30       	cpi	r24, 0x02	; 2
    7a8a:	09 f0       	breq	.+2      	; 0x7a8e <USB_Device_ProcessControlRequest+0xce>
    7a8c:	a8 c0       	rjmp	.+336    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7a8e:	8f 71       	andi	r24, 0x1F	; 31
    7a90:	82 30       	cpi	r24, 0x02	; 2
    7a92:	09 f0       	breq	.+2      	; 0x7a96 <USB_Device_ProcessControlRequest+0xd6>
    7a94:	a4 c0       	rjmp	.+328    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7a96:	80 91 96 01 	lds	r24, 0x0196
    7a9a:	88 23       	and	r24, r24
    7a9c:	41 f5       	brne	.+80     	; 0x7aee <USB_Device_ProcessControlRequest+0x12e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7a9e:	20 91 98 01 	lds	r18, 0x0198
    7aa2:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7aa4:	09 f4       	brne	.+2      	; 0x7aa8 <USB_Device_ProcessControlRequest+0xe8>
    7aa6:	9b c0       	rjmp	.+310    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7aa8:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7aac:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7ab0:	80 ff       	sbrs	r24, 0
    7ab2:	1d c0       	rjmp	.+58     	; 0x7aee <USB_Device_ProcessControlRequest+0x12e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7ab4:	80 91 95 01 	lds	r24, 0x0195
    7ab8:	83 30       	cpi	r24, 0x03	; 3
    7aba:	21 f4       	brne	.+8      	; 0x7ac4 <USB_Device_ProcessControlRequest+0x104>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7abc:	80 91 eb 00 	lds	r24, 0x00EB
    7ac0:	80 62       	ori	r24, 0x20	; 32
    7ac2:	13 c0       	rjmp	.+38     	; 0x7aea <USB_Device_ProcessControlRequest+0x12a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7ac4:	80 91 eb 00 	lds	r24, 0x00EB
    7ac8:	80 61       	ori	r24, 0x10	; 16
    7aca:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7ace:	81 e0       	ldi	r24, 0x01	; 1
    7ad0:	90 e0       	ldi	r25, 0x00	; 0
    7ad2:	02 c0       	rjmp	.+4      	; 0x7ad8 <USB_Device_ProcessControlRequest+0x118>
    7ad4:	88 0f       	add	r24, r24
    7ad6:	99 1f       	adc	r25, r25
    7ad8:	2a 95       	dec	r18
    7ada:	e2 f7       	brpl	.-8      	; 0x7ad4 <USB_Device_ProcessControlRequest+0x114>
    7adc:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    7ae0:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7ae4:	80 91 eb 00 	lds	r24, 0x00EB
    7ae8:	88 60       	ori	r24, 0x08	; 8
    7aea:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7aee:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7af2:	80 91 e8 00 	lds	r24, 0x00E8
    7af6:	87 7f       	andi	r24, 0xF7	; 247
    7af8:	53 c0       	rjmp	.+166    	; 0x7ba0 <USB_Device_ProcessControlRequest+0x1e0>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7afa:	88 23       	and	r24, r24
    7afc:	09 f0       	breq	.+2      	; 0x7b00 <USB_Device_ProcessControlRequest+0x140>
    7afe:	6f c0       	rjmp	.+222    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7b00:	10 91 96 01 	lds	r17, 0x0196
    7b04:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7b06:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7b08:	f8 94       	cli
    7b0a:	80 91 e8 00 	lds	r24, 0x00E8
    7b0e:	87 7f       	andi	r24, 0xF7	; 247
    7b10:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7b14:	30 de       	rcall	.-928    	; 0x7776 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b16:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    7b1a:	80 ff       	sbrs	r24, 0
    7b1c:	fc cf       	rjmp	.-8      	; 0x7b16 <USB_Device_ProcessControlRequest+0x156>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    7b1e:	80 91 e3 00 	lds	r24, 0x00E3
    7b22:	80 78       	andi	r24, 0x80	; 128
    7b24:	81 2b       	or	r24, r17
    7b26:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
    7b2a:	80 91 e3 00 	lds	r24, 0x00E3
    7b2e:	80 68       	ori	r24, 0x80	; 128
    7b30:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7b34:	11 23       	and	r17, r17
    7b36:	11 f0       	breq	.+4      	; 0x7b3c <USB_Device_ProcessControlRequest+0x17c>
    7b38:	83 e0       	ldi	r24, 0x03	; 3
    7b3a:	01 c0       	rjmp	.+2      	; 0x7b3e <USB_Device_ProcessControlRequest+0x17e>
    7b3c:	82 e0       	ldi	r24, 0x02	; 2
    7b3e:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7b40:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
    7b42:	4d c0       	rjmp	.+154    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7b44:	80 58       	subi	r24, 0x80	; 128
    7b46:	82 30       	cpi	r24, 0x02	; 2
    7b48:	08 f0       	brcs	.+2      	; 0x7b4c <USB_Device_ProcessControlRequest+0x18c>
    7b4a:	49 c0       	rjmp	.+146    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7b4c:	80 91 96 01 	lds	r24, 0x0196
    7b50:	90 91 97 01 	lds	r25, 0x0197
    7b54:	60 91 98 01 	lds	r22, 0x0198
    7b58:	ae 01       	movw	r20, r28
    7b5a:	4f 5f       	subi	r20, 0xFF	; 255
    7b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    7b5e:	d3 dd       	rcall	.-1114   	; 0x7706 <CALLBACK_USB_GetDescriptor>
    7b60:	bc 01       	movw	r22, r24
    7b62:	00 97       	sbiw	r24, 0x00	; 0
    7b64:	09 f4       	brne	.+2      	; 0x7b68 <USB_Device_ProcessControlRequest+0x1a8>
    7b66:	3b c0       	rjmp	.+118    	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7b68:	80 91 e8 00 	lds	r24, 0x00E8
    7b6c:	87 7f       	andi	r24, 0xF7	; 247
    7b6e:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7b72:	89 81       	ldd	r24, Y+1	; 0x01
    7b74:	9a 81       	ldd	r25, Y+2	; 0x02
    7b76:	49 d0       	rcall	.+146    	; 0x7c0a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7b78:	80 91 e8 00 	lds	r24, 0x00E8
    7b7c:	8b 77       	andi	r24, 0x7B	; 123
    7b7e:	80 93 e8 00 	sts	0x00E8, r24
    7b82:	2d c0       	rjmp	.+90     	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7b84:	80 38       	cpi	r24, 0x80	; 128
    7b86:	59 f5       	brne	.+86     	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7b88:	80 91 e8 00 	lds	r24, 0x00E8
    7b8c:	87 7f       	andi	r24, 0xF7	; 247
    7b8e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
    7b92:	80 91 92 01 	lds	r24, 0x0192
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7b96:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b9a:	80 91 e8 00 	lds	r24, 0x00E8
    7b9e:	8e 77       	andi	r24, 0x7E	; 126
    7ba0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7ba4:	e8 dd       	rcall	.-1072   	; 0x7776 <Endpoint_ClearStatusStage>
    7ba6:	1b c0       	rjmp	.+54     	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7ba8:	88 23       	and	r24, r24
    7baa:	c9 f4       	brne	.+50     	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7bac:	90 91 96 01 	lds	r25, 0x0196
    7bb0:	92 30       	cpi	r25, 0x02	; 2
    7bb2:	a8 f4       	brcc	.+42     	; 0x7bde <USB_Device_ProcessControlRequest+0x21e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7bb4:	80 91 e8 00 	lds	r24, 0x00E8
    7bb8:	87 7f       	andi	r24, 0xF7	; 247
    7bba:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7bbe:	90 93 92 01 	sts	0x0192, r25

	Endpoint_ClearStatusStage();
    7bc2:	d9 dd       	rcall	.-1102   	; 0x7776 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    7bc4:	80 91 92 01 	lds	r24, 0x0192
    7bc8:	88 23       	and	r24, r24
    7bca:	21 f4       	brne	.+8      	; 0x7bd4 <USB_Device_ProcessControlRequest+0x214>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7bcc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7bd0:	87 ff       	sbrs	r24, 7
    7bd2:	02 c0       	rjmp	.+4      	; 0x7bd8 <USB_Device_ProcessControlRequest+0x218>
    7bd4:	84 e0       	ldi	r24, 0x04	; 4
    7bd6:	01 c0       	rjmp	.+2      	; 0x7bda <USB_Device_ProcessControlRequest+0x21a>
    7bd8:	81 e0       	ldi	r24, 0x01	; 1
    7bda:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    7bdc:	d3 da       	rcall	.-2650   	; 0x7184 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7bde:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7be2:	83 ff       	sbrs	r24, 3
    7be4:	0a c0       	rjmp	.+20     	; 0x7bfa <USB_Device_ProcessControlRequest+0x23a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7be6:	80 91 eb 00 	lds	r24, 0x00EB
    7bea:	80 62       	ori	r24, 0x20	; 32
    7bec:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7bf0:	80 91 e8 00 	lds	r24, 0x00E8
    7bf4:	87 7f       	andi	r24, 0xF7	; 247
    7bf6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    7bfa:	0f 90       	pop	r0
    7bfc:	0f 90       	pop	r0
    7bfe:	cf 91       	pop	r28
    7c00:	df 91       	pop	r29
    7c02:	1f 91       	pop	r17
    7c04:	0f 91       	pop	r16
    7c06:	08 95       	ret

00007c08 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7c08:	08 95       	ret

00007c0a <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7c0a:	48 2f       	mov	r20, r24
    7c0c:	59 2f       	mov	r21, r25
    7c0e:	fa 01       	movw	r30, r20
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7c10:	80 91 9a 01 	lds	r24, 0x019A
    7c14:	90 91 9b 01 	lds	r25, 0x019B
    7c18:	86 17       	cp	r24, r22
    7c1a:	97 07       	cpc	r25, r23
    7c1c:	18 f4       	brcc	.+6      	; 0x7c24 <Endpoint_Write_Control_Stream_LE+0x1a>
    7c1e:	bc 01       	movw	r22, r24
    7c20:	40 e0       	ldi	r20, 0x00	; 0
    7c22:	3b c0       	rjmp	.+118    	; 0x7c9a <Endpoint_Write_Control_Stream_LE+0x90>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7c24:	61 15       	cp	r22, r1
    7c26:	71 05       	cpc	r23, r1
    7c28:	d9 f7       	brne	.-10     	; 0x7c20 <Endpoint_Write_Control_Stream_LE+0x16>
    7c2a:	80 91 e8 00 	lds	r24, 0x00E8
    7c2e:	8e 77       	andi	r24, 0x7E	; 126
    7c30:	80 93 e8 00 	sts	0x00E8, r24
    7c34:	f5 cf       	rjmp	.-22     	; 0x7c20 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c36:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c38:	88 23       	and	r24, r24
    7c3a:	09 f4       	brne	.+2      	; 0x7c3e <Endpoint_Write_Control_Stream_LE+0x34>
    7c3c:	43 c0       	rjmp	.+134    	; 0x7cc4 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c3e:	85 30       	cpi	r24, 0x05	; 5
    7c40:	e9 f1       	breq	.+122    	; 0x7cbc <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c42:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7c46:	83 fd       	sbrc	r24, 3
    7c48:	3b c0       	rjmp	.+118    	; 0x7cc0 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7c4a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7c4e:	82 fd       	sbrc	r24, 2
    7c50:	2f c0       	rjmp	.+94     	; 0x7cb0 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7c52:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7c56:	80 ff       	sbrs	r24, 0
    7c58:	20 c0       	rjmp	.+64     	; 0x7c9a <Endpoint_Write_Control_Stream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7c5a:	90 91 f3 00 	lds	r25, 0x00F3
    7c5e:	80 91 f2 00 	lds	r24, 0x00F2
    7c62:	39 2f       	mov	r19, r25
    7c64:	20 e0       	ldi	r18, 0x00	; 0
    7c66:	90 e0       	ldi	r25, 0x00	; 0
    7c68:	82 2b       	or	r24, r18
    7c6a:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    7c6c:	06 c0       	rjmp	.+12     	; 0x7c7a <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7c6e:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7c70:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7c74:	61 50       	subi	r22, 0x01	; 1
    7c76:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    7c78:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    7c7a:	61 15       	cp	r22, r1
    7c7c:	71 05       	cpc	r23, r1
    7c7e:	19 f0       	breq	.+6      	; 0x7c86 <Endpoint_Write_Control_Stream_LE+0x7c>
    7c80:	88 30       	cpi	r24, 0x08	; 8
    7c82:	91 05       	cpc	r25, r1
    7c84:	a0 f3       	brcs	.-24     	; 0x7c6e <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    7c86:	41 e0       	ldi	r20, 0x01	; 1
    7c88:	88 30       	cpi	r24, 0x08	; 8
    7c8a:	91 05       	cpc	r25, r1
    7c8c:	09 f0       	breq	.+2      	; 0x7c90 <Endpoint_Write_Control_Stream_LE+0x86>
    7c8e:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7c90:	80 91 e8 00 	lds	r24, 0x00E8
    7c94:	8e 77       	andi	r24, 0x7E	; 126
    7c96:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7c9a:	61 15       	cp	r22, r1
    7c9c:	71 05       	cpc	r23, r1
    7c9e:	59 f6       	brne	.-106    	; 0x7c36 <Endpoint_Write_Control_Stream_LE+0x2c>
    7ca0:	44 23       	and	r20, r20
    7ca2:	49 f6       	brne	.-110    	; 0x7c36 <Endpoint_Write_Control_Stream_LE+0x2c>
    7ca4:	05 c0       	rjmp	.+10     	; 0x7cb0 <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7ca6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7ca8:	88 23       	and	r24, r24
    7caa:	61 f0       	breq	.+24     	; 0x7cc4 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7cac:	85 30       	cpi	r24, 0x05	; 5
    7cae:	61 f0       	breq	.+24     	; 0x7cc8 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7cb0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7cb4:	82 ff       	sbrs	r24, 2
    7cb6:	f7 cf       	rjmp	.-18     	; 0x7ca6 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7cb8:	80 e0       	ldi	r24, 0x00	; 0
    7cba:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7cbc:	83 e0       	ldi	r24, 0x03	; 3
    7cbe:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7cc0:	81 e0       	ldi	r24, 0x01	; 1
    7cc2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7cc4:	82 e0       	ldi	r24, 0x02	; 2
    7cc6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7cc8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7cca:	08 95       	ret

00007ccc <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7ccc:	61 15       	cp	r22, r1
    7cce:	71 05       	cpc	r23, r1
    7cd0:	51 f5       	brne	.+84     	; 0x7d26 <Endpoint_Read_Control_Stream_LE+0x5a>
    7cd2:	24 c0       	rjmp	.+72     	; 0x7d1c <Endpoint_Read_Control_Stream_LE+0x50>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7cd4:	4e b3       	in	r20, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7cd6:	44 23       	and	r20, r20
    7cd8:	c9 f1       	breq	.+114    	; 0x7d4c <Endpoint_Read_Control_Stream_LE+0x80>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7cda:	45 30       	cpi	r20, 0x05	; 5
    7cdc:	99 f1       	breq	.+102    	; 0x7d44 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7cde:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7ce2:	43 fd       	sbrc	r20, 3
    7ce4:	31 c0       	rjmp	.+98     	; 0x7d48 <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7ce6:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7cea:	42 ff       	sbrs	r20, 2
    7cec:	f3 cf       	rjmp	.-26     	; 0x7cd4 <Endpoint_Read_Control_Stream_LE+0x8>
    7cee:	e8 2f       	mov	r30, r24
    7cf0:	f9 2f       	mov	r31, r25
    7cf2:	07 c0       	rjmp	.+14     	; 0x7d02 <Endpoint_Read_Control_Stream_LE+0x36>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7cf4:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7cf8:	81 93       	st	Z+, r24
    7cfa:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7cfc:	61 50       	subi	r22, 0x01	; 1
    7cfe:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7d00:	69 f0       	breq	.+26     	; 0x7d1c <Endpoint_Read_Control_Stream_LE+0x50>
    7d02:	cf 01       	movw	r24, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7d04:	50 91 f3 00 	lds	r21, 0x00F3
    7d08:	40 91 f2 00 	lds	r20, 0x00F2
    7d0c:	35 2f       	mov	r19, r21
    7d0e:	20 e0       	ldi	r18, 0x00	; 0
    7d10:	50 e0       	ldi	r21, 0x00	; 0
    7d12:	42 2b       	or	r20, r18
    7d14:	53 2b       	or	r21, r19
    7d16:	41 15       	cp	r20, r1
    7d18:	51 05       	cpc	r21, r1
    7d1a:	61 f7       	brne	.-40     	; 0x7cf4 <Endpoint_Read_Control_Stream_LE+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7d1c:	40 91 e8 00 	lds	r20, 0x00E8
    7d20:	4b 77       	andi	r20, 0x7B	; 123
    7d22:	40 93 e8 00 	sts	0x00E8, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7d26:	61 15       	cp	r22, r1
    7d28:	71 05       	cpc	r23, r1
    7d2a:	a1 f6       	brne	.-88     	; 0x7cd4 <Endpoint_Read_Control_Stream_LE+0x8>
    7d2c:	05 c0       	rjmp	.+10     	; 0x7d38 <Endpoint_Read_Control_Stream_LE+0x6c>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7d2e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7d30:	88 23       	and	r24, r24
    7d32:	61 f0       	breq	.+24     	; 0x7d4c <Endpoint_Read_Control_Stream_LE+0x80>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7d34:	85 30       	cpi	r24, 0x05	; 5
    7d36:	61 f0       	breq	.+24     	; 0x7d50 <Endpoint_Read_Control_Stream_LE+0x84>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d38:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7d3c:	80 ff       	sbrs	r24, 0
    7d3e:	f7 cf       	rjmp	.-18     	; 0x7d2e <Endpoint_Read_Control_Stream_LE+0x62>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7d40:	80 e0       	ldi	r24, 0x00	; 0
    7d42:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7d44:	83 e0       	ldi	r24, 0x03	; 3
    7d46:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7d48:	81 e0       	ldi	r24, 0x01	; 1
    7d4a:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7d4c:	82 e0       	ldi	r24, 0x02	; 2
    7d4e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7d50:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7d52:	08 95       	ret

00007d54 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7d54:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7d56:	8e b3       	in	r24, 0x1e	; 30
    7d58:	88 23       	and	r24, r24
    7d5a:	61 f0       	breq	.+24     	; 0x7d74 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7d5c:	10 91 e9 00 	lds	r17, 0x00E9
    7d60:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d62:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7d66:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7d6a:	83 ff       	sbrs	r24, 3
    7d6c:	01 c0       	rjmp	.+2      	; 0x7d70 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    7d6e:	28 de       	rcall	.-944    	; 0x79c0 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d70:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7d74:	1f 91       	pop	r17
    7d76:	08 95       	ret

00007d78 <__eerd_byte_m32u4>:
    7d78:	f9 99       	sbic	0x1f, 1	; 31
    7d7a:	fe cf       	rjmp	.-4      	; 0x7d78 <__eerd_byte_m32u4>
    7d7c:	92 bd       	out	0x22, r25	; 34
    7d7e:	81 bd       	out	0x21, r24	; 33
    7d80:	f8 9a       	sbi	0x1f, 0	; 31
    7d82:	99 27       	eor	r25, r25
    7d84:	80 b5       	in	r24, 0x20	; 32
    7d86:	08 95       	ret

00007d88 <__eewr_byte_m32u4>:
    7d88:	26 2f       	mov	r18, r22

00007d8a <__eewr_r18_m32u4>:
    7d8a:	f9 99       	sbic	0x1f, 1	; 31
    7d8c:	fe cf       	rjmp	.-4      	; 0x7d8a <__eewr_r18_m32u4>
    7d8e:	1f ba       	out	0x1f, r1	; 31
    7d90:	92 bd       	out	0x22, r25	; 34
    7d92:	81 bd       	out	0x21, r24	; 33
    7d94:	20 bd       	out	0x20, r18	; 32
    7d96:	0f b6       	in	r0, 0x3f	; 63
    7d98:	f8 94       	cli
    7d9a:	fa 9a       	sbi	0x1f, 2	; 31
    7d9c:	f9 9a       	sbi	0x1f, 1	; 31
    7d9e:	0f be       	out	0x3f, r0	; 63
    7da0:	01 96       	adiw	r24, 0x01	; 1
    7da2:	08 95       	ret

00007da4 <_exit>:
    7da4:	f8 94       	cli

00007da6 <__stop_program>:
    7da6:	ff cf       	rjmp	.-2      	; 0x7da6 <__stop_program>
